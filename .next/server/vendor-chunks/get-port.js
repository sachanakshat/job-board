"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/get-port";
exports.ids = ["vendor-chunks/get-port"];
exports.modules = {

/***/ "(rsc)/./node_modules/get-port/index.js":
/*!****************************************!*\
  !*** ./node_modules/get-port/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst net = __webpack_require__(/*! net */ \"net\");\nclass Locked extends Error {\n    constructor(port){\n        super(`${port} is locked`);\n    }\n}\nconst lockedPorts = {\n    old: new Set(),\n    young: new Set()\n};\n// On this interval, the old locked ports are discarded,\n// the young locked ports are moved to old locked ports,\n// and a new young set for locked ports are created.\nconst releaseOldLockedPortsIntervalMs = 1000 * 15;\n// Lazily create interval on first use\nlet interval;\nconst getAvailablePort = (options)=>new Promise((resolve, reject)=>{\n        const server = net.createServer();\n        server.unref();\n        server.on(\"error\", reject);\n        server.listen(options, ()=>{\n            const { port } = server.address();\n            server.close(()=>{\n                resolve(port);\n            });\n        });\n    });\nconst portCheckSequence = function*(ports) {\n    if (ports) {\n        yield* ports;\n    }\n    yield 0; // Fall back to 0 if anything else failed\n};\nmodule.exports = async (options)=>{\n    let ports;\n    if (options) {\n        ports = typeof options.port === \"number\" ? [\n            options.port\n        ] : options.port;\n    }\n    if (interval === undefined) {\n        interval = setInterval(()=>{\n            lockedPorts.old = lockedPorts.young;\n            lockedPorts.young = new Set();\n        }, releaseOldLockedPortsIntervalMs);\n        // Does not exist in some environments (Electron, Jest jsdom env, browser, etc).\n        if (interval.unref) {\n            interval.unref();\n        }\n    }\n    for (const port of portCheckSequence(ports)){\n        try {\n            let availablePort = await getAvailablePort({\n                ...options,\n                port\n            }); // eslint-disable-line no-await-in-loop\n            while(lockedPorts.old.has(availablePort) || lockedPorts.young.has(availablePort)){\n                if (port !== 0) {\n                    throw new Locked(port);\n                }\n                availablePort = await getAvailablePort({\n                    ...options,\n                    port\n                }); // eslint-disable-line no-await-in-loop\n            }\n            lockedPorts.young.add(availablePort);\n            return availablePort;\n        } catch (error) {\n            if (![\n                \"EADDRINUSE\",\n                \"EACCES\"\n            ].includes(error.code) && !(error instanceof Locked)) {\n                throw error;\n            }\n        }\n    }\n    throw new Error(\"No available ports found\");\n};\nmodule.exports.makeRange = (from, to)=>{\n    if (!Number.isInteger(from) || !Number.isInteger(to)) {\n        throw new TypeError(\"`from` and `to` must be integer numbers\");\n    }\n    if (from < 1024 || from > 65535) {\n        throw new RangeError(\"`from` must be between 1024 and 65535\");\n    }\n    if (to < 1024 || to > 65536) {\n        throw new RangeError(\"`to` must be between 1024 and 65536\");\n    }\n    if (to < from) {\n        throw new RangeError(\"`to` must be greater than or equal to `from`\");\n    }\n    const generator = function*(from, to) {\n        for(let port = from; port <= to; port++){\n            yield port;\n        }\n    };\n    return generator(from, to);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxJQUFJSSxXQUFXO0lBQ3RCO0lBRUEsSUFBSUosS0FBS0QsTUFBTTtRQUNkLE1BQU0sSUFBSUssV0FBVztJQUN0QjtJQUVBLE1BQU1DLFlBQVksVUFBWU4sSUFBSSxFQUFFQyxFQUFFO1FBQ3JDLElBQUssSUFBSWpDLE9BQU9nQyxNQUFNaEMsUUFBUWlDLElBQUlqQyxPQUFRO1lBQ3pDLE1BQU1BO1FBQ1A7SUFDRDtJQUVBLE9BQU9zQyxVQUFVTixNQUFNQztBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1ib2FyZC1zY3JhcGVyLy4vbm9kZV9tb2R1bGVzL2dldC1wb3J0L2luZGV4LmpzPzUyZWMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgbmV0ID0gcmVxdWlyZSgnbmV0Jyk7XG5cbmNsYXNzIExvY2tlZCBleHRlbmRzIEVycm9yIHtcblx0Y29uc3RydWN0b3IocG9ydCkge1xuXHRcdHN1cGVyKGAke3BvcnR9IGlzIGxvY2tlZGApO1xuXHR9XG59XG5cbmNvbnN0IGxvY2tlZFBvcnRzID0ge1xuXHRvbGQ6IG5ldyBTZXQoKSxcblx0eW91bmc6IG5ldyBTZXQoKVxufTtcblxuLy8gT24gdGhpcyBpbnRlcnZhbCwgdGhlIG9sZCBsb2NrZWQgcG9ydHMgYXJlIGRpc2NhcmRlZCxcbi8vIHRoZSB5b3VuZyBsb2NrZWQgcG9ydHMgYXJlIG1vdmVkIHRvIG9sZCBsb2NrZWQgcG9ydHMsXG4vLyBhbmQgYSBuZXcgeW91bmcgc2V0IGZvciBsb2NrZWQgcG9ydHMgYXJlIGNyZWF0ZWQuXG5jb25zdCByZWxlYXNlT2xkTG9ja2VkUG9ydHNJbnRlcnZhbE1zID0gMTAwMCAqIDE1O1xuXG4vLyBMYXppbHkgY3JlYXRlIGludGVydmFsIG9uIGZpcnN0IHVzZVxubGV0IGludGVydmFsO1xuXG5jb25zdCBnZXRBdmFpbGFibGVQb3J0ID0gb3B0aW9ucyA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdGNvbnN0IHNlcnZlciA9IG5ldC5jcmVhdGVTZXJ2ZXIoKTtcblx0c2VydmVyLnVucmVmKCk7XG5cdHNlcnZlci5vbignZXJyb3InLCByZWplY3QpO1xuXHRzZXJ2ZXIubGlzdGVuKG9wdGlvbnMsICgpID0+IHtcblx0XHRjb25zdCB7cG9ydH0gPSBzZXJ2ZXIuYWRkcmVzcygpO1xuXHRcdHNlcnZlci5jbG9zZSgoKSA9PiB7XG5cdFx0XHRyZXNvbHZlKHBvcnQpO1xuXHRcdH0pO1xuXHR9KTtcbn0pO1xuXG5jb25zdCBwb3J0Q2hlY2tTZXF1ZW5jZSA9IGZ1bmN0aW9uICogKHBvcnRzKSB7XG5cdGlmIChwb3J0cykge1xuXHRcdHlpZWxkICogcG9ydHM7XG5cdH1cblxuXHR5aWVsZCAwOyAvLyBGYWxsIGJhY2sgdG8gMCBpZiBhbnl0aGluZyBlbHNlIGZhaWxlZFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBvcHRpb25zID0+IHtcblx0bGV0IHBvcnRzO1xuXG5cdGlmIChvcHRpb25zKSB7XG5cdFx0cG9ydHMgPSB0eXBlb2Ygb3B0aW9ucy5wb3J0ID09PSAnbnVtYmVyJyA/IFtvcHRpb25zLnBvcnRdIDogb3B0aW9ucy5wb3J0O1xuXHR9XG5cblx0aWYgKGludGVydmFsID09PSB1bmRlZmluZWQpIHtcblx0XHRpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcblx0XHRcdGxvY2tlZFBvcnRzLm9sZCA9IGxvY2tlZFBvcnRzLnlvdW5nO1xuXHRcdFx0bG9ja2VkUG9ydHMueW91bmcgPSBuZXcgU2V0KCk7XG5cdFx0fSwgcmVsZWFzZU9sZExvY2tlZFBvcnRzSW50ZXJ2YWxNcyk7XG5cblx0XHQvLyBEb2VzIG5vdCBleGlzdCBpbiBzb21lIGVudmlyb25tZW50cyAoRWxlY3Ryb24sIEplc3QganNkb20gZW52LCBicm93c2VyLCBldGMpLlxuXHRcdGlmIChpbnRlcnZhbC51bnJlZikge1xuXHRcdFx0aW50ZXJ2YWwudW5yZWYoKTtcblx0XHR9XG5cdH1cblxuXHRmb3IgKGNvbnN0IHBvcnQgb2YgcG9ydENoZWNrU2VxdWVuY2UocG9ydHMpKSB7XG5cdFx0dHJ5IHtcblx0XHRcdGxldCBhdmFpbGFibGVQb3J0ID0gYXdhaXQgZ2V0QXZhaWxhYmxlUG9ydCh7Li4ub3B0aW9ucywgcG9ydH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWF3YWl0LWluLWxvb3Bcblx0XHRcdHdoaWxlIChsb2NrZWRQb3J0cy5vbGQuaGFzKGF2YWlsYWJsZVBvcnQpIHx8IGxvY2tlZFBvcnRzLnlvdW5nLmhhcyhhdmFpbGFibGVQb3J0KSkge1xuXHRcdFx0XHRpZiAocG9ydCAhPT0gMCkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBMb2NrZWQocG9ydCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRhdmFpbGFibGVQb3J0ID0gYXdhaXQgZ2V0QXZhaWxhYmxlUG9ydCh7Li4ub3B0aW9ucywgcG9ydH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWF3YWl0LWluLWxvb3Bcblx0XHRcdH1cblxuXHRcdFx0bG9ja2VkUG9ydHMueW91bmcuYWRkKGF2YWlsYWJsZVBvcnQpO1xuXHRcdFx0cmV0dXJuIGF2YWlsYWJsZVBvcnQ7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGlmICghWydFQUREUklOVVNFJywgJ0VBQ0NFUyddLmluY2x1ZGVzKGVycm9yLmNvZGUpICYmICEoZXJyb3IgaW5zdGFuY2VvZiBMb2NrZWQpKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvcignTm8gYXZhaWxhYmxlIHBvcnRzIGZvdW5kJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5tYWtlUmFuZ2UgPSAoZnJvbSwgdG8pID0+IHtcblx0aWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGZyb20pIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHRvKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bmcm9tYCBhbmQgYHRvYCBtdXN0IGJlIGludGVnZXIgbnVtYmVycycpO1xuXHR9XG5cblx0aWYgKGZyb20gPCAxMDI0IHx8IGZyb20gPiA2NTUzNSkge1xuXHRcdHRocm93IG5ldyBSYW5nZUVycm9yKCdgZnJvbWAgbXVzdCBiZSBiZXR3ZWVuIDEwMjQgYW5kIDY1NTM1Jyk7XG5cdH1cblxuXHRpZiAodG8gPCAxMDI0IHx8IHRvID4gNjU1MzYpIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignYHRvYCBtdXN0IGJlIGJldHdlZW4gMTAyNCBhbmQgNjU1MzYnKTtcblx0fVxuXG5cdGlmICh0byA8IGZyb20pIHtcblx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcignYHRvYCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgZnJvbWAnKTtcblx0fVxuXG5cdGNvbnN0IGdlbmVyYXRvciA9IGZ1bmN0aW9uICogKGZyb20sIHRvKSB7XG5cdFx0Zm9yIChsZXQgcG9ydCA9IGZyb207IHBvcnQgPD0gdG87IHBvcnQrKykge1xuXHRcdFx0eWllbGQgcG9ydDtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIGdlbmVyYXRvcihmcm9tLCB0byk7XG59O1xuIl0sIm5hbWVzIjpbIm5ldCIsInJlcXVpcmUiLCJMb2NrZWQiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwicG9ydCIsImxvY2tlZFBvcnRzIiwib2xkIiwiU2V0IiwieW91bmciLCJyZWxlYXNlT2xkTG9ja2VkUG9ydHNJbnRlcnZhbE1zIiwiaW50ZXJ2YWwiLCJnZXRBdmFpbGFibGVQb3J0Iiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2VydmVyIiwiY3JlYXRlU2VydmVyIiwidW5yZWYiLCJvbiIsImxpc3RlbiIsImFkZHJlc3MiLCJjbG9zZSIsInBvcnRDaGVja1NlcXVlbmNlIiwicG9ydHMiLCJtb2R1bGUiLCJleHBvcnRzIiwidW5kZWZpbmVkIiwic2V0SW50ZXJ2YWwiLCJhdmFpbGFibGVQb3J0IiwiaGFzIiwiYWRkIiwiZXJyb3IiLCJpbmNsdWRlcyIsImNvZGUiLCJtYWtlUmFuZ2UiLCJmcm9tIiwidG8iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJUeXBlRXJyb3IiLCJSYW5nZUVycm9yIiwiZ2VuZXJhdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/get-port/index.js\n");

/***/ })

};
;