"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/detect-libc";
exports.ids = ["vendor-chunks/detect-libc"];
exports.modules = {

/***/ "(rsc)/./node_modules/detect-libc/lib/detect-libc.js":
/*!*****************************************************!*\
  !*** ./node_modules/detect-libc/lib/detect-libc.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\nconst childProcess = __webpack_require__(/*! child_process */ \"child_process\");\nconst { isLinux, getReport } = __webpack_require__(/*! ./process */ \"(rsc)/./node_modules/detect-libc/lib/process.js\");\nconst { LDD_PATH, readFile, readFileSync } = __webpack_require__(/*! ./filesystem */ \"(rsc)/./node_modules/detect-libc/lib/filesystem.js\");\nlet cachedFamilyFilesystem;\nlet cachedVersionFilesystem;\nconst command = \"getconf GNU_LIBC_VERSION 2>&1 || true; ldd --version 2>&1 || true\";\nlet commandOut = \"\";\nconst safeCommand = ()=>{\n    if (!commandOut) {\n        return new Promise((resolve)=>{\n            childProcess.exec(command, (err, out)=>{\n                commandOut = err ? \" \" : out;\n                resolve(commandOut);\n            });\n        });\n    }\n    return commandOut;\n};\nconst safeCommandSync = ()=>{\n    if (!commandOut) {\n        try {\n            commandOut = childProcess.execSync(command, {\n                encoding: \"utf8\"\n            });\n        } catch (_err) {\n            commandOut = \" \";\n        }\n    }\n    return commandOut;\n};\n/**\n * A String constant containing the value `glibc`.\n * @type {string}\n * @public\n */ const GLIBC = \"glibc\";\n/**\n * A Regexp constant to get the GLIBC Version.\n * @type {string}\n */ const RE_GLIBC_VERSION = /LIBC[a-z0-9 \\-).]*?(\\d+\\.\\d+)/i;\n/**\n * A String constant containing the value `musl`.\n * @type {string}\n * @public\n */ const MUSL = \"musl\";\nconst isFileMusl = (f)=>f.includes(\"libc.musl-\") || f.includes(\"ld-musl-\");\nconst familyFromReport = ()=>{\n    const report = getReport();\n    if (report.header && report.header.glibcVersionRuntime) {\n        return GLIBC;\n    }\n    if (Array.isArray(report.sharedObjects)) {\n        if (report.sharedObjects.some(isFileMusl)) {\n            return MUSL;\n        }\n    }\n    return null;\n};\nconst familyFromCommand = (out)=>{\n    const [getconf, ldd1] = out.split(/[\\r\\n]+/);\n    if (getconf && getconf.includes(GLIBC)) {\n        return GLIBC;\n    }\n    if (ldd1 && ldd1.includes(MUSL)) {\n        return MUSL;\n    }\n    return null;\n};\nconst getFamilyFromLddContent = (content)=>{\n    if (content.includes(\"musl\")) {\n        return MUSL;\n    }\n    if (content.includes(\"GNU C Library\")) {\n        return GLIBC;\n    }\n    return null;\n};\nconst familyFromFilesystem = async ()=>{\n    if (cachedFamilyFilesystem !== undefined) {\n        return cachedFamilyFilesystem;\n    }\n    cachedFamilyFilesystem = null;\n    try {\n        const lddContent = await readFile(LDD_PATH);\n        cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n    } catch (e) {}\n    return cachedFamilyFilesystem;\n};\nconst familyFromFilesystemSync = ()=>{\n    if (cachedFamilyFilesystem !== undefined) {\n        return cachedFamilyFilesystem;\n    }\n    cachedFamilyFilesystem = null;\n    try {\n        const lddContent = readFileSync(LDD_PATH);\n        cachedFamilyFilesystem = getFamilyFromLddContent(lddContent);\n    } catch (e) {}\n    return cachedFamilyFilesystem;\n};\n/**\n * Resolves with the libc family when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */ const family = async ()=>{\n    let family = null;\n    if (isLinux()) {\n        family = await familyFromFilesystem();\n        if (!family) {\n            family = familyFromReport();\n        }\n        if (!family) {\n            const out = await safeCommand();\n            family = familyFromCommand(out);\n        }\n    }\n    return family;\n};\n/**\n * Returns the libc family when it can be determined, `null` otherwise.\n * @returns {?string}\n */ const familySync = ()=>{\n    let family = null;\n    if (isLinux()) {\n        family = familyFromFilesystemSync();\n        if (!family) {\n            family = familyFromReport();\n        }\n        if (!family) {\n            const out = safeCommandSync();\n            family = familyFromCommand(out);\n        }\n    }\n    return family;\n};\n/**\n * Resolves `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {Promise<boolean>}\n */ const isNonGlibcLinux = async ()=>isLinux() && await family() !== GLIBC;\n/**\n * Returns `true` only when the platform is Linux and the libc family is not `glibc`.\n * @returns {boolean}\n */ const isNonGlibcLinuxSync = ()=>isLinux() && familySync() !== GLIBC;\nconst versionFromFilesystem = async ()=>{\n    if (cachedVersionFilesystem !== undefined) {\n        return cachedVersionFilesystem;\n    }\n    cachedVersionFilesystem = null;\n    try {\n        const lddContent = await readFile(LDD_PATH);\n        const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n        if (versionMatch) {\n            cachedVersionFilesystem = versionMatch[1];\n        }\n    } catch (e) {}\n    return cachedVersionFilesystem;\n};\nconst versionFromFilesystemSync = ()=>{\n    if (cachedVersionFilesystem !== undefined) {\n        return cachedVersionFilesystem;\n    }\n    cachedVersionFilesystem = null;\n    try {\n        const lddContent = readFileSync(LDD_PATH);\n        const versionMatch = lddContent.match(RE_GLIBC_VERSION);\n        if (versionMatch) {\n            cachedVersionFilesystem = versionMatch[1];\n        }\n    } catch (e) {}\n    return cachedVersionFilesystem;\n};\nconst versionFromReport = ()=>{\n    const report = getReport();\n    if (report.header && report.header.glibcVersionRuntime) {\n        return report.header.glibcVersionRuntime;\n    }\n    return null;\n};\nconst versionSuffix = (s)=>s.trim().split(/\\s+/)[1];\nconst versionFromCommand = (out)=>{\n    const [getconf, ldd1, ldd2] = out.split(/[\\r\\n]+/);\n    if (getconf && getconf.includes(GLIBC)) {\n        return versionSuffix(getconf);\n    }\n    if (ldd1 && ldd2 && ldd1.includes(MUSL)) {\n        return versionSuffix(ldd2);\n    }\n    return null;\n};\n/**\n * Resolves with the libc version when it can be determined, `null` otherwise.\n * @returns {Promise<?string>}\n */ const version = async ()=>{\n    let version = null;\n    if (isLinux()) {\n        version = await versionFromFilesystem();\n        if (!version) {\n            version = versionFromReport();\n        }\n        if (!version) {\n            const out = await safeCommand();\n            version = versionFromCommand(out);\n        }\n    }\n    return version;\n};\n/**\n * Returns the libc version when it can be determined, `null` otherwise.\n * @returns {?string}\n */ const versionSync = ()=>{\n    let version = null;\n    if (isLinux()) {\n        version = versionFromFilesystemSync();\n        if (!version) {\n            version = versionFromReport();\n        }\n        if (!version) {\n            const out = safeCommandSync();\n            version = versionFromCommand(out);\n        }\n    }\n    return version;\n};\nmodule.exports = {\n    GLIBC,\n    MUSL,\n    family,\n    familySync,\n    isNonGlibcLinux,\n    isNonGlibcLinuxSync,\n    version,\n    versionSync\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/detect-libc/lib/detect-libc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/detect-libc/lib/filesystem.js":
/*!****************************************************!*\
  !*** ./node_modules/detect-libc/lib/filesystem.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Copyright 2017 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n/**\n * The path where we can find the ldd\n */ const LDD_PATH = \"/usr/bin/ldd\";\n/**\n * Read the content of a file synchronous\n *\n * @param {string} path\n * @returns {string}\n */ const readFileSync = (path)=>fs.readFileSync(path, \"utf-8\");\n/**\n * Read the content of a file\n *\n * @param {string} path\n * @returns {Promise<string>}\n */ const readFile = (path)=>new Promise((resolve, reject)=>{\n        fs.readFile(path, \"utf-8\", (err, data)=>{\n            if (err) {\n                reject(err);\n            } else {\n                resolve(data);\n            }\n        });\n    });\nmodule.exports = {\n    LDD_PATH,\n    readFileSync,\n    readFile\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWxpYmMvbGliL2ZpbGVzeXN0ZW0uanMiLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDO0FBQzNDLHNDQUFzQztBQUV0QztBQUVBLE1BQU1BLEtBQUtDLG1CQUFPQSxDQUFDO0FBRW5COztDQUVDLEdBQ0QsTUFBTUMsV0FBVztBQUVqQjs7Ozs7Q0FLQyxHQUNELE1BQU1DLGVBQWUsQ0FBQ0MsT0FBU0osR0FBR0csWUFBWSxDQUFDQyxNQUFNO0FBRXJEOzs7OztDQUtDLEdBQ0QsTUFBTUMsV0FBVyxDQUFDRCxPQUFTLElBQUlFLFFBQVEsQ0FBQ0MsU0FBU0M7UUFDL0NSLEdBQUdLLFFBQVEsQ0FBQ0QsTUFBTSxTQUFTLENBQUNLLEtBQUtDO1lBQy9CLElBQUlELEtBQUs7Z0JBQ1BELE9BQU9DO1lBQ1QsT0FBTztnQkFDTEYsUUFBUUc7WUFDVjtRQUNGO0lBQ0Y7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZWO0lBQ0FDO0lBQ0FFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2ItYm9hcmQtc2NyYXBlci8uL25vZGVfbW9kdWxlcy9kZXRlY3QtbGliYy9saWIvZmlsZXN5c3RlbS5qcz82MjhiIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3IExvdmVsbCBGdWxsZXIgYW5kIG90aGVycy5cbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuXG4vKipcbiAqIFRoZSBwYXRoIHdoZXJlIHdlIGNhbiBmaW5kIHRoZSBsZGRcbiAqL1xuY29uc3QgTEREX1BBVEggPSAnL3Vzci9iaW4vbGRkJztcblxuLyoqXG4gKiBSZWFkIHRoZSBjb250ZW50IG9mIGEgZmlsZSBzeW5jaHJvbm91c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5jb25zdCByZWFkRmlsZVN5bmMgPSAocGF0aCkgPT4gZnMucmVhZEZpbGVTeW5jKHBhdGgsICd1dGYtOCcpO1xuXG4vKipcbiAqIFJlYWQgdGhlIGNvbnRlbnQgb2YgYSBmaWxlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59XG4gKi9cbmNvbnN0IHJlYWRGaWxlID0gKHBhdGgpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgZnMucmVhZEZpbGUocGF0aCwgJ3V0Zi04JywgKGVyciwgZGF0YSkgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH1cbiAgfSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIExERF9QQVRILFxuICByZWFkRmlsZVN5bmMsXG4gIHJlYWRGaWxlXG59O1xuIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIkxERF9QQVRIIiwicmVhZEZpbGVTeW5jIiwicGF0aCIsInJlYWRGaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/detect-libc/lib/filesystem.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/detect-libc/lib/process.js":
/*!*************************************************!*\
  !*** ./node_modules/detect-libc/lib/process.js ***!
  \*************************************************/
/***/ ((module) => {

eval("// Copyright 2017 Lovell Fuller and others.\n// SPDX-License-Identifier: Apache-2.0\n\nconst isLinux = ()=>process.platform === \"linux\";\nlet report = null;\nconst getReport = ()=>{\n    if (!report) {\n        /* istanbul ignore next */ if (isLinux() && process.report) {\n            const orig = process.report.excludeNetwork;\n            process.report.excludeNetwork = true;\n            report = process.report.getReport();\n            process.report.excludeNetwork = orig;\n        } else {\n            report = {};\n        }\n    }\n    return report;\n};\nmodule.exports = {\n    isLinux,\n    getReport\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZGV0ZWN0LWxpYmMvbGliL3Byb2Nlc3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDO0FBQzNDLHNDQUFzQztBQUV0QztBQUVBLE1BQU1BLFVBQVUsSUFBTUMsUUFBUUMsUUFBUSxLQUFLO0FBRTNDLElBQUlDLFNBQVM7QUFDYixNQUFNQyxZQUFZO0lBQ2hCLElBQUksQ0FBQ0QsUUFBUTtRQUNYLHdCQUF3QixHQUN4QixJQUFJSCxhQUFhQyxRQUFRRSxNQUFNLEVBQUU7WUFDL0IsTUFBTUUsT0FBT0osUUFBUUUsTUFBTSxDQUFDRyxjQUFjO1lBQzFDTCxRQUFRRSxNQUFNLENBQUNHLGNBQWMsR0FBRztZQUNoQ0gsU0FBU0YsUUFBUUUsTUFBTSxDQUFDQyxTQUFTO1lBQ2pDSCxRQUFRRSxNQUFNLENBQUNHLGNBQWMsR0FBR0Q7UUFDbEMsT0FBTztZQUNMRixTQUFTLENBQUM7UUFDWjtJQUNGO0lBQ0EsT0FBT0E7QUFDVDtBQUVBSSxPQUFPQyxPQUFPLEdBQUc7SUFBRVI7SUFBU0k7QUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2pvYi1ib2FyZC1zY3JhcGVyLy4vbm9kZV9tb2R1bGVzL2RldGVjdC1saWJjL2xpYi9wcm9jZXNzLmpzPzA5ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTcgTG92ZWxsIEZ1bGxlciBhbmQgb3RoZXJzLlxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBpc0xpbnV4ID0gKCkgPT4gcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4JztcblxubGV0IHJlcG9ydCA9IG51bGw7XG5jb25zdCBnZXRSZXBvcnQgPSAoKSA9PiB7XG4gIGlmICghcmVwb3J0KSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICBpZiAoaXNMaW51eCgpICYmIHByb2Nlc3MucmVwb3J0KSB7XG4gICAgICBjb25zdCBvcmlnID0gcHJvY2Vzcy5yZXBvcnQuZXhjbHVkZU5ldHdvcms7XG4gICAgICBwcm9jZXNzLnJlcG9ydC5leGNsdWRlTmV0d29yayA9IHRydWU7XG4gICAgICByZXBvcnQgPSBwcm9jZXNzLnJlcG9ydC5nZXRSZXBvcnQoKTtcbiAgICAgIHByb2Nlc3MucmVwb3J0LmV4Y2x1ZGVOZXR3b3JrID0gb3JpZztcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwb3J0ID0ge307XG4gICAgfVxuICB9XG4gIHJldHVybiByZXBvcnQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHsgaXNMaW51eCwgZ2V0UmVwb3J0IH07XG4iXSwibmFtZXMiOlsiaXNMaW51eCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsInJlcG9ydCIsImdldFJlcG9ydCIsIm9yaWciLCJleGNsdWRlTmV0d29yayIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/detect-libc/lib/process.js\n");

/***/ })

};
;