"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/msgpackr";
exports.ids = ["vendor-chunks/msgpackr"];
exports.modules = {

/***/ "(rsc)/./node_modules/msgpackr/dist/node.cjs":
/*!*********************************************!*\
  !*** ./node_modules/msgpackr/dist/node.cjs ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar stream = __webpack_require__(/*! stream */ \"stream\");\nvar module$1 = __webpack_require__(/*! module */ \"module\");\nvar decoder;\ntry {\n    decoder = new TextDecoder();\n} catch (error) {}\nvar src;\nvar srcEnd;\nvar position$1 = 0;\nconst EMPTY_ARRAY = [];\nvar strings = EMPTY_ARRAY;\nvar stringPosition = 0;\nvar currentUnpackr = {};\nvar currentStructures;\nvar srcString;\nvar srcStringStart = 0;\nvar srcStringEnd = 0;\nvar bundledStrings$1;\nvar referenceMap;\nvar currentExtensions = [];\nvar dataView;\nvar defaultOptions = {\n    useRecords: false,\n    mapsAsObjects: true\n};\nclass C1Type {\n}\nconst C1 = new C1Type();\nC1.name = \"MessagePack 0xC1\";\nvar sequentialMode = false;\nvar inlineObjectReadThreshold = 2;\nvar readStruct$1, onLoadedStructures$1, onSaveState;\n// no-eval build\ntry {\n    new Function(\"\");\n} catch (error) {\n    // if eval variants are not supported, do not create inline object readers ever\n    inlineObjectReadThreshold = Infinity;\n}\nclass Unpackr {\n    constructor(options){\n        if (options) {\n            if (options.useRecords === false && options.mapsAsObjects === undefined) options.mapsAsObjects = true;\n            if (options.sequential && options.trusted !== false) {\n                options.trusted = true;\n                if (!options.structures && options.useRecords != false) {\n                    options.structures = [];\n                    if (!options.maxSharedStructures) options.maxSharedStructures = 0;\n                }\n            }\n            if (options.structures) options.structures.sharedLength = options.structures.length;\n            else if (options.getStructures) {\n                (options.structures = []).uninitialized = true; // this is what we use to denote an uninitialized structures\n                options.structures.sharedLength = 0;\n            }\n            if (options.int64AsNumber) {\n                options.int64AsType = \"number\";\n            }\n        }\n        Object.assign(this, options);\n    }\n    unpack(source, options) {\n        if (src) {\n            // re-entrant execution, save the state and restore it after we do this unpack\n            return saveState$1(()=>{\n                clearSource();\n                return this ? this.unpack(source, options) : Unpackr.prototype.unpack.call(defaultOptions, source, options);\n            });\n        }\n        if (!source.buffer && source.constructor === ArrayBuffer) source = typeof Buffer !== \"undefined\" ? Buffer.from(source) : new Uint8Array(source);\n        if (typeof options === \"object\") {\n            srcEnd = options.end || source.length;\n            position$1 = options.start || 0;\n        } else {\n            position$1 = 0;\n            srcEnd = options > -1 ? options : source.length;\n        }\n        stringPosition = 0;\n        srcStringEnd = 0;\n        srcString = null;\n        strings = EMPTY_ARRAY;\n        bundledStrings$1 = null;\n        src = source;\n        // this provides cached access to the data view for a buffer if it is getting reused, which is a recommend\n        // technique for getting data from a database where it can be copied into an existing buffer instead of creating\n        // new ones\n        try {\n            dataView = source.dataView || (source.dataView = new DataView(source.buffer, source.byteOffset, source.byteLength));\n        } catch (error) {\n            // if it doesn't have a buffer, maybe it is the wrong type of object\n            src = null;\n            if (source instanceof Uint8Array) throw error;\n            throw new Error(\"Source must be a Uint8Array or Buffer but was a \" + (source && typeof source == \"object\" ? source.constructor.name : typeof source));\n        }\n        if (this instanceof Unpackr) {\n            currentUnpackr = this;\n            if (this.structures) {\n                currentStructures = this.structures;\n                return checkedRead(options);\n            } else if (!currentStructures || currentStructures.length > 0) {\n                currentStructures = [];\n            }\n        } else {\n            currentUnpackr = defaultOptions;\n            if (!currentStructures || currentStructures.length > 0) currentStructures = [];\n        }\n        return checkedRead(options);\n    }\n    unpackMultiple(source, forEach) {\n        let values, lastPosition = 0;\n        try {\n            sequentialMode = true;\n            let size = source.length;\n            let value = this ? this.unpack(source, size) : defaultUnpackr.unpack(source, size);\n            if (forEach) {\n                if (forEach(value, lastPosition, position$1) === false) return;\n                while(position$1 < size){\n                    lastPosition = position$1;\n                    if (forEach(checkedRead(), lastPosition, position$1) === false) {\n                        return;\n                    }\n                }\n            } else {\n                values = [\n                    value\n                ];\n                while(position$1 < size){\n                    lastPosition = position$1;\n                    values.push(checkedRead());\n                }\n                return values;\n            }\n        } catch (error) {\n            error.lastPosition = lastPosition;\n            error.values = values;\n            throw error;\n        } finally{\n            sequentialMode = false;\n            clearSource();\n        }\n    }\n    _mergeStructures(loadedStructures, existingStructures) {\n        if (onLoadedStructures$1) loadedStructures = onLoadedStructures$1.call(this, loadedStructures);\n        loadedStructures = loadedStructures || [];\n        if (Object.isFrozen(loadedStructures)) loadedStructures = loadedStructures.map((structure)=>structure.slice(0));\n        for(let i = 0, l = loadedStructures.length; i < l; i++){\n            let structure = loadedStructures[i];\n            if (structure) {\n                structure.isShared = true;\n                if (i >= 32) structure.highByte = i - 32 >> 5;\n            }\n        }\n        loadedStructures.sharedLength = loadedStructures.length;\n        for(let id in existingStructures || []){\n            if (id >= 0) {\n                let structure = loadedStructures[id];\n                let existing = existingStructures[id];\n                if (existing) {\n                    if (structure) (loadedStructures.restoreStructures || (loadedStructures.restoreStructures = []))[id] = structure;\n                    loadedStructures[id] = existing;\n                }\n            }\n        }\n        return this.structures = loadedStructures;\n    }\n    decode(source, options) {\n        return this.unpack(source, options);\n    }\n}\nfunction checkedRead(options) {\n    try {\n        if (!currentUnpackr.trusted && !sequentialMode) {\n            let sharedLength = currentStructures.sharedLength || 0;\n            if (sharedLength < currentStructures.length) currentStructures.length = sharedLength;\n        }\n        let result;\n        if (currentUnpackr.randomAccessStructure && src[position$1] < 0x40 && src[position$1] >= 0x20 && readStruct$1) {\n            result = readStruct$1(src, position$1, srcEnd, currentUnpackr);\n            src = null; // dispose of this so that recursive unpack calls don't save state\n            if (!(options && options.lazy) && result) result = result.toJSON();\n            position$1 = srcEnd;\n        } else result = read();\n        if (bundledStrings$1) {\n            position$1 = bundledStrings$1.postBundlePosition;\n            bundledStrings$1 = null;\n        }\n        if (sequentialMode) // we only need to restore the structures if there was an error, but if we completed a read,\n        // we can clear this out and keep the structures we read\n        currentStructures.restoreStructures = null;\n        if (position$1 == srcEnd) {\n            // finished reading this source, cleanup references\n            if (currentStructures && currentStructures.restoreStructures) restoreStructures();\n            currentStructures = null;\n            src = null;\n            if (referenceMap) referenceMap = null;\n        } else if (position$1 > srcEnd) {\n            // over read\n            throw new Error(\"Unexpected end of MessagePack data\");\n        } else if (!sequentialMode) {\n            let jsonView;\n            try {\n                jsonView = JSON.stringify(result, (_, value)=>typeof value === \"bigint\" ? `${value}n` : value).slice(0, 100);\n            } catch (error) {\n                jsonView = \"(JSON view not available \" + error + \")\";\n            }\n            throw new Error(\"Data read, but end of buffer not reached \" + jsonView);\n        }\n        // else more to read, but we are reading sequentially, so don't clear source yet\n        return result;\n    } catch (error) {\n        if (currentStructures && currentStructures.restoreStructures) restoreStructures();\n        clearSource();\n        if (error instanceof RangeError || error.message.startsWith(\"Unexpected end of buffer\") || position$1 > srcEnd) {\n            error.incomplete = true;\n        }\n        throw error;\n    }\n}\nfunction restoreStructures() {\n    for(let id in currentStructures.restoreStructures){\n        currentStructures[id] = currentStructures.restoreStructures[id];\n    }\n    currentStructures.restoreStructures = null;\n}\nfunction read() {\n    let token = src[position$1++];\n    if (token < 0xa0) {\n        if (token < 0x80) {\n            if (token < 0x40) return token;\n            else {\n                let structure = currentStructures[token & 0x3f] || currentUnpackr.getStructures && loadStructures()[token & 0x3f];\n                if (structure) {\n                    if (!structure.read) {\n                        structure.read = createStructureReader(structure, token & 0x3f);\n                    }\n                    return structure.read();\n                } else return token;\n            }\n        } else if (token < 0x90) {\n            // map\n            token -= 0x80;\n            if (currentUnpackr.mapsAsObjects) {\n                let object = {};\n                for(let i = 0; i < token; i++){\n                    let key = readKey();\n                    if (key === \"__proto__\") key = \"__proto_\";\n                    object[key] = read();\n                }\n                return object;\n            } else {\n                let map = new Map();\n                for(let i = 0; i < token; i++){\n                    map.set(read(), read());\n                }\n                return map;\n            }\n        } else {\n            token -= 0x90;\n            let array = new Array(token);\n            for(let i = 0; i < token; i++){\n                array[i] = read();\n            }\n            if (currentUnpackr.freezeData) return Object.freeze(array);\n            return array;\n        }\n    } else if (token < 0xc0) {\n        // fixstr\n        let length = token - 0xa0;\n        if (srcStringEnd >= position$1) {\n            return srcString.slice(position$1 - srcStringStart, (position$1 += length) - srcStringStart);\n        }\n        if (srcStringEnd == 0 && srcEnd < 140) {\n            // for small blocks, avoiding the overhead of the extract call is helpful\n            let string = length < 16 ? shortStringInJS(length) : longStringInJS(length);\n            if (string != null) return string;\n        }\n        return readFixedString(length);\n    } else {\n        let value;\n        switch(token){\n            case 0xc0:\n                return null;\n            case 0xc1:\n                if (bundledStrings$1) {\n                    value = read(); // followed by the length of the string in characters (not bytes!)\n                    if (value > 0) return bundledStrings$1[1].slice(bundledStrings$1.position1, bundledStrings$1.position1 += value);\n                    else return bundledStrings$1[0].slice(bundledStrings$1.position0, bundledStrings$1.position0 -= value);\n                }\n                return C1; // \"never-used\", return special object to denote that\n            case 0xc2:\n                return false;\n            case 0xc3:\n                return true;\n            case 0xc4:\n                // bin 8\n                value = src[position$1++];\n                if (value === undefined) throw new Error(\"Unexpected end of buffer\");\n                return readBin(value);\n            case 0xc5:\n                // bin 16\n                value = dataView.getUint16(position$1);\n                position$1 += 2;\n                return readBin(value);\n            case 0xc6:\n                // bin 32\n                value = dataView.getUint32(position$1);\n                position$1 += 4;\n                return readBin(value);\n            case 0xc7:\n                // ext 8\n                return readExt(src[position$1++]);\n            case 0xc8:\n                // ext 16\n                value = dataView.getUint16(position$1);\n                position$1 += 2;\n                return readExt(value);\n            case 0xc9:\n                // ext 32\n                value = dataView.getUint32(position$1);\n                position$1 += 4;\n                return readExt(value);\n            case 0xca:\n                value = dataView.getFloat32(position$1);\n                if (currentUnpackr.useFloat32 > 2) {\n                    // this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n                    let multiplier = mult10[(src[position$1] & 0x7f) << 1 | src[position$1 + 1] >> 7];\n                    position$1 += 4;\n                    return (multiplier * value + (value > 0 ? 0.5 : -0.5) >> 0) / multiplier;\n                }\n                position$1 += 4;\n                return value;\n            case 0xcb:\n                value = dataView.getFloat64(position$1);\n                position$1 += 8;\n                return value;\n            // uint handlers\n            case 0xcc:\n                return src[position$1++];\n            case 0xcd:\n                value = dataView.getUint16(position$1);\n                position$1 += 2;\n                return value;\n            case 0xce:\n                value = dataView.getUint32(position$1);\n                position$1 += 4;\n                return value;\n            case 0xcf:\n                if (currentUnpackr.int64AsType === \"number\") {\n                    value = dataView.getUint32(position$1) * 0x100000000;\n                    value += dataView.getUint32(position$1 + 4);\n                } else if (currentUnpackr.int64AsType === \"string\") {\n                    value = dataView.getBigUint64(position$1).toString();\n                } else if (currentUnpackr.int64AsType === \"auto\") {\n                    value = dataView.getBigUint64(position$1);\n                    if (value <= BigInt(2) << BigInt(52)) value = Number(value);\n                } else value = dataView.getBigUint64(position$1);\n                position$1 += 8;\n                return value;\n            // int handlers\n            case 0xd0:\n                return dataView.getInt8(position$1++);\n            case 0xd1:\n                value = dataView.getInt16(position$1);\n                position$1 += 2;\n                return value;\n            case 0xd2:\n                value = dataView.getInt32(position$1);\n                position$1 += 4;\n                return value;\n            case 0xd3:\n                if (currentUnpackr.int64AsType === \"number\") {\n                    value = dataView.getInt32(position$1) * 0x100000000;\n                    value += dataView.getUint32(position$1 + 4);\n                } else if (currentUnpackr.int64AsType === \"string\") {\n                    value = dataView.getBigInt64(position$1).toString();\n                } else if (currentUnpackr.int64AsType === \"auto\") {\n                    value = dataView.getBigInt64(position$1);\n                    if (value >= BigInt(-2) << BigInt(52) && value <= BigInt(2) << BigInt(52)) value = Number(value);\n                } else value = dataView.getBigInt64(position$1);\n                position$1 += 8;\n                return value;\n            case 0xd4:\n                // fixext 1\n                value = src[position$1++];\n                if (value == 0x72) {\n                    return recordDefinition(src[position$1++] & 0x3f);\n                } else {\n                    let extension = currentExtensions[value];\n                    if (extension) {\n                        if (extension.read) {\n                            position$1++; // skip filler byte\n                            return extension.read(read());\n                        } else if (extension.noBuffer) {\n                            position$1++; // skip filler byte\n                            return extension();\n                        } else return extension(src.subarray(position$1, ++position$1));\n                    } else throw new Error(\"Unknown extension \" + value);\n                }\n            case 0xd5:\n                // fixext 2\n                value = src[position$1];\n                if (value == 0x72) {\n                    position$1++;\n                    return recordDefinition(src[position$1++] & 0x3f, src[position$1++]);\n                } else return readExt(2);\n            case 0xd6:\n                // fixext 4\n                return readExt(4);\n            case 0xd7:\n                // fixext 8\n                return readExt(8);\n            case 0xd8:\n                // fixext 16\n                return readExt(16);\n            case 0xd9:\n                // str 8\n                value = src[position$1++];\n                if (srcStringEnd >= position$1) {\n                    return srcString.slice(position$1 - srcStringStart, (position$1 += value) - srcStringStart);\n                }\n                return readString8(value);\n            case 0xda:\n                // str 16\n                value = dataView.getUint16(position$1);\n                position$1 += 2;\n                if (srcStringEnd >= position$1) {\n                    return srcString.slice(position$1 - srcStringStart, (position$1 += value) - srcStringStart);\n                }\n                return readString16(value);\n            case 0xdb:\n                // str 32\n                value = dataView.getUint32(position$1);\n                position$1 += 4;\n                if (srcStringEnd >= position$1) {\n                    return srcString.slice(position$1 - srcStringStart, (position$1 += value) - srcStringStart);\n                }\n                return readString32(value);\n            case 0xdc:\n                // array 16\n                value = dataView.getUint16(position$1);\n                position$1 += 2;\n                return readArray(value);\n            case 0xdd:\n                // array 32\n                value = dataView.getUint32(position$1);\n                position$1 += 4;\n                return readArray(value);\n            case 0xde:\n                // map 16\n                value = dataView.getUint16(position$1);\n                position$1 += 2;\n                return readMap(value);\n            case 0xdf:\n                // map 32\n                value = dataView.getUint32(position$1);\n                position$1 += 4;\n                return readMap(value);\n            default:\n                if (token >= 0xe0) return token - 0x100;\n                if (token === undefined) {\n                    let error = new Error(\"Unexpected end of MessagePack data\");\n                    error.incomplete = true;\n                    throw error;\n                }\n                throw new Error(\"Unknown MessagePack token \" + token);\n        }\n    }\n}\nconst validName = /^[a-zA-Z_$][a-zA-Z\\d_$]*$/;\nfunction createStructureReader(structure, firstId) {\n    function readObject() {\n        // This initial function is quick to instantiate, but runs slower. After several iterations pay the cost to build the faster function\n        if (readObject.count++ > inlineObjectReadThreshold) {\n            let readObject = structure.read = new Function(\"r\", \"return function(){return \" + (currentUnpackr.freezeData ? \"Object.freeze\" : \"\") + \"({\" + structure.map((key)=>key === \"__proto__\" ? \"__proto_:r()\" : validName.test(key) ? key + \":r()\" : \"[\" + JSON.stringify(key) + \"]:r()\").join(\",\") + \"})}\")(read);\n            if (structure.highByte === 0) structure.read = createSecondByteReader(firstId, structure.read);\n            return readObject() // second byte is already read, if there is one so immediately read object\n            ;\n        }\n        let object = {};\n        for(let i = 0, l = structure.length; i < l; i++){\n            let key = structure[i];\n            if (key === \"__proto__\") key = \"__proto_\";\n            object[key] = read();\n        }\n        if (currentUnpackr.freezeData) return Object.freeze(object);\n        return object;\n    }\n    readObject.count = 0;\n    if (structure.highByte === 0) {\n        return createSecondByteReader(firstId, readObject);\n    }\n    return readObject;\n}\nconst createSecondByteReader = (firstId, read0)=>{\n    return function() {\n        let highByte = src[position$1++];\n        if (highByte === 0) return read0();\n        let id = firstId < 32 ? -(firstId + (highByte << 5)) : firstId + (highByte << 5);\n        let structure = currentStructures[id] || loadStructures()[id];\n        if (!structure) {\n            throw new Error(\"Record id is not defined for \" + id);\n        }\n        if (!structure.read) structure.read = createStructureReader(structure, firstId);\n        return structure.read();\n    };\n};\nfunction loadStructures() {\n    let loadedStructures = saveState$1(()=>{\n        // save the state in case getStructures modifies our buffer\n        src = null;\n        return currentUnpackr.getStructures();\n    });\n    return currentStructures = currentUnpackr._mergeStructures(loadedStructures, currentStructures);\n}\nvar readFixedString = readStringJS;\nvar readString8 = readStringJS;\nvar readString16 = readStringJS;\nvar readString32 = readStringJS;\nexports.isNativeAccelerationEnabled = false;\nfunction setExtractor(extractStrings) {\n    exports.isNativeAccelerationEnabled = true;\n    readFixedString = readString(1);\n    readString8 = readString(2);\n    readString16 = readString(3);\n    readString32 = readString(5);\n    function readString(headerLength) {\n        return function readString(length) {\n            let string = strings[stringPosition++];\n            if (string == null) {\n                if (bundledStrings$1) return readStringJS(length);\n                let byteOffset = src.byteOffset;\n                let extraction = extractStrings(position$1 - headerLength + byteOffset, srcEnd + byteOffset, src.buffer);\n                if (typeof extraction == \"string\") {\n                    string = extraction;\n                    strings = EMPTY_ARRAY;\n                } else {\n                    strings = extraction;\n                    stringPosition = 1;\n                    srcStringEnd = 1; // even if a utf-8 string was decoded, must indicate we are in the midst of extracted strings and can't skip strings\n                    string = strings[0];\n                    if (string === undefined) throw new Error(\"Unexpected end of buffer\");\n                }\n            }\n            let srcStringLength = string.length;\n            if (srcStringLength <= length) {\n                position$1 += length;\n                return string;\n            }\n            srcString = string;\n            srcStringStart = position$1;\n            srcStringEnd = position$1 + srcStringLength;\n            position$1 += length;\n            return string.slice(0, length) // we know we just want the beginning\n            ;\n        };\n    }\n}\nfunction readStringJS(length) {\n    let result;\n    if (length < 16) {\n        if (result = shortStringInJS(length)) return result;\n    }\n    if (length > 64 && decoder) return decoder.decode(src.subarray(position$1, position$1 += length));\n    const end = position$1 + length;\n    const units = [];\n    result = \"\";\n    while(position$1 < end){\n        const byte1 = src[position$1++];\n        if ((byte1 & 0x80) === 0) {\n            // 1 byte\n            units.push(byte1);\n        } else if ((byte1 & 0xe0) === 0xc0) {\n            // 2 bytes\n            const byte2 = src[position$1++] & 0x3f;\n            units.push((byte1 & 0x1f) << 6 | byte2);\n        } else if ((byte1 & 0xf0) === 0xe0) {\n            // 3 bytes\n            const byte2 = src[position$1++] & 0x3f;\n            const byte3 = src[position$1++] & 0x3f;\n            units.push((byte1 & 0x1f) << 12 | byte2 << 6 | byte3);\n        } else if ((byte1 & 0xf8) === 0xf0) {\n            // 4 bytes\n            const byte2 = src[position$1++] & 0x3f;\n            const byte3 = src[position$1++] & 0x3f;\n            const byte4 = src[position$1++] & 0x3f;\n            let unit = (byte1 & 0x07) << 0x12 | byte2 << 0x0c | byte3 << 0x06 | byte4;\n            if (unit > 0xffff) {\n                unit -= 0x10000;\n                units.push(unit >>> 10 & 0x3ff | 0xd800);\n                unit = 0xdc00 | unit & 0x3ff;\n            }\n            units.push(unit);\n        } else {\n            units.push(byte1);\n        }\n        if (units.length >= 0x1000) {\n            result += fromCharCode.apply(String, units);\n            units.length = 0;\n        }\n    }\n    if (units.length > 0) {\n        result += fromCharCode.apply(String, units);\n    }\n    return result;\n}\nfunction readString(source, start, length) {\n    let existingSrc = src;\n    src = source;\n    position$1 = start;\n    try {\n        return readStringJS(length);\n    } finally{\n        src = existingSrc;\n    }\n}\nfunction readArray(length) {\n    let array = new Array(length);\n    for(let i = 0; i < length; i++){\n        array[i] = read();\n    }\n    if (currentUnpackr.freezeData) return Object.freeze(array);\n    return array;\n}\nfunction readMap(length) {\n    if (currentUnpackr.mapsAsObjects) {\n        let object = {};\n        for(let i = 0; i < length; i++){\n            let key = readKey();\n            if (key === \"__proto__\") key = \"__proto_\";\n            object[key] = read();\n        }\n        return object;\n    } else {\n        let map = new Map();\n        for(let i = 0; i < length; i++){\n            map.set(read(), read());\n        }\n        return map;\n    }\n}\nvar fromCharCode = String.fromCharCode;\nfunction longStringInJS(length) {\n    let start = position$1;\n    let bytes = new Array(length);\n    for(let i = 0; i < length; i++){\n        const byte = src[position$1++];\n        if ((byte & 0x80) > 0) {\n            position$1 = start;\n            return;\n        }\n        bytes[i] = byte;\n    }\n    return fromCharCode.apply(String, bytes);\n}\nfunction shortStringInJS(length) {\n    if (length < 4) {\n        if (length < 2) {\n            if (length === 0) return \"\";\n            else {\n                let a = src[position$1++];\n                if ((a & 0x80) > 1) {\n                    position$1 -= 1;\n                    return;\n                }\n                return fromCharCode(a);\n            }\n        } else {\n            let a = src[position$1++];\n            let b = src[position$1++];\n            if ((a & 0x80) > 0 || (b & 0x80) > 0) {\n                position$1 -= 2;\n                return;\n            }\n            if (length < 3) return fromCharCode(a, b);\n            let c = src[position$1++];\n            if ((c & 0x80) > 0) {\n                position$1 -= 3;\n                return;\n            }\n            return fromCharCode(a, b, c);\n        }\n    } else {\n        let a = src[position$1++];\n        let b = src[position$1++];\n        let c = src[position$1++];\n        let d = src[position$1++];\n        if ((a & 0x80) > 0 || (b & 0x80) > 0 || (c & 0x80) > 0 || (d & 0x80) > 0) {\n            position$1 -= 4;\n            return;\n        }\n        if (length < 6) {\n            if (length === 4) return fromCharCode(a, b, c, d);\n            else {\n                let e = src[position$1++];\n                if ((e & 0x80) > 0) {\n                    position$1 -= 5;\n                    return;\n                }\n                return fromCharCode(a, b, c, d, e);\n            }\n        } else if (length < 8) {\n            let e = src[position$1++];\n            let f = src[position$1++];\n            if ((e & 0x80) > 0 || (f & 0x80) > 0) {\n                position$1 -= 6;\n                return;\n            }\n            if (length < 7) return fromCharCode(a, b, c, d, e, f);\n            let g = src[position$1++];\n            if ((g & 0x80) > 0) {\n                position$1 -= 7;\n                return;\n            }\n            return fromCharCode(a, b, c, d, e, f, g);\n        } else {\n            let e = src[position$1++];\n            let f = src[position$1++];\n            let g = src[position$1++];\n            let h = src[position$1++];\n            if ((e & 0x80) > 0 || (f & 0x80) > 0 || (g & 0x80) > 0 || (h & 0x80) > 0) {\n                position$1 -= 8;\n                return;\n            }\n            if (length < 10) {\n                if (length === 8) return fromCharCode(a, b, c, d, e, f, g, h);\n                else {\n                    let i = src[position$1++];\n                    if ((i & 0x80) > 0) {\n                        position$1 -= 9;\n                        return;\n                    }\n                    return fromCharCode(a, b, c, d, e, f, g, h, i);\n                }\n            } else if (length < 12) {\n                let i = src[position$1++];\n                let j = src[position$1++];\n                if ((i & 0x80) > 0 || (j & 0x80) > 0) {\n                    position$1 -= 10;\n                    return;\n                }\n                if (length < 11) return fromCharCode(a, b, c, d, e, f, g, h, i, j);\n                let k = src[position$1++];\n                if ((k & 0x80) > 0) {\n                    position$1 -= 11;\n                    return;\n                }\n                return fromCharCode(a, b, c, d, e, f, g, h, i, j, k);\n            } else {\n                let i = src[position$1++];\n                let j = src[position$1++];\n                let k = src[position$1++];\n                let l = src[position$1++];\n                if ((i & 0x80) > 0 || (j & 0x80) > 0 || (k & 0x80) > 0 || (l & 0x80) > 0) {\n                    position$1 -= 12;\n                    return;\n                }\n                if (length < 14) {\n                    if (length === 12) return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l);\n                    else {\n                        let m = src[position$1++];\n                        if ((m & 0x80) > 0) {\n                            position$1 -= 13;\n                            return;\n                        }\n                        return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m);\n                    }\n                } else {\n                    let m = src[position$1++];\n                    let n = src[position$1++];\n                    if ((m & 0x80) > 0 || (n & 0x80) > 0) {\n                        position$1 -= 14;\n                        return;\n                    }\n                    if (length < 15) return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n);\n                    let o = src[position$1++];\n                    if ((o & 0x80) > 0) {\n                        position$1 -= 15;\n                        return;\n                    }\n                    return fromCharCode(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);\n                }\n            }\n        }\n    }\n}\nfunction readOnlyJSString() {\n    let token = src[position$1++];\n    let length;\n    if (token < 0xc0) {\n        // fixstr\n        length = token - 0xa0;\n    } else {\n        switch(token){\n            case 0xd9:\n                // str 8\n                length = src[position$1++];\n                break;\n            case 0xda:\n                // str 16\n                length = dataView.getUint16(position$1);\n                position$1 += 2;\n                break;\n            case 0xdb:\n                // str 32\n                length = dataView.getUint32(position$1);\n                position$1 += 4;\n                break;\n            default:\n                throw new Error(\"Expected string\");\n        }\n    }\n    return readStringJS(length);\n}\nfunction readBin(length) {\n    return currentUnpackr.copyBuffers ? // specifically use the copying slice (not the node one)\n    Uint8Array.prototype.slice.call(src, position$1, position$1 += length) : src.subarray(position$1, position$1 += length);\n}\nfunction readExt(length) {\n    let type = src[position$1++];\n    if (currentExtensions[type]) {\n        let end;\n        return currentExtensions[type](src.subarray(position$1, end = position$1 += length), (readPosition)=>{\n            position$1 = readPosition;\n            try {\n                return read();\n            } finally{\n                position$1 = end;\n            }\n        });\n    } else throw new Error(\"Unknown extension type \" + type);\n}\nvar keyCache = new Array(4096);\nfunction readKey() {\n    let length = src[position$1++];\n    if (length >= 0xa0 && length < 0xc0) {\n        // fixstr, potentially use key cache\n        length = length - 0xa0;\n        if (srcStringEnd >= position$1) return srcString.slice(position$1 - srcStringStart, (position$1 += length) - srcStringStart);\n        else if (!(srcStringEnd == 0 && srcEnd < 180)) return readFixedString(length);\n    } else {\n        position$1--;\n        return asSafeString(read());\n    }\n    let key = (length << 5 ^ (length > 1 ? dataView.getUint16(position$1) : length > 0 ? src[position$1] : 0)) & 0xfff;\n    let entry = keyCache[key];\n    let checkPosition = position$1;\n    let end = position$1 + length - 3;\n    let chunk;\n    let i = 0;\n    if (entry && entry.bytes == length) {\n        while(checkPosition < end){\n            chunk = dataView.getUint32(checkPosition);\n            if (chunk != entry[i++]) {\n                checkPosition = 0x70000000;\n                break;\n            }\n            checkPosition += 4;\n        }\n        end += 3;\n        while(checkPosition < end){\n            chunk = src[checkPosition++];\n            if (chunk != entry[i++]) {\n                checkPosition = 0x70000000;\n                break;\n            }\n        }\n        if (checkPosition === end) {\n            position$1 = checkPosition;\n            return entry.string;\n        }\n        end -= 3;\n        checkPosition = position$1;\n    }\n    entry = [];\n    keyCache[key] = entry;\n    entry.bytes = length;\n    while(checkPosition < end){\n        chunk = dataView.getUint32(checkPosition);\n        entry.push(chunk);\n        checkPosition += 4;\n    }\n    end += 3;\n    while(checkPosition < end){\n        chunk = src[checkPosition++];\n        entry.push(chunk);\n    }\n    // for small blocks, avoiding the overhead of the extract call is helpful\n    let string = length < 16 ? shortStringInJS(length) : longStringInJS(length);\n    if (string != null) return entry.string = string;\n    return entry.string = readFixedString(length);\n}\nfunction asSafeString(property) {\n    // protect against expensive (DoS) string conversions\n    if (typeof property === \"string\") return property;\n    if (typeof property === \"number\" || typeof property === \"boolean\" || typeof property === \"bigint\") return property.toString();\n    if (property == null) return property + \"\";\n    throw new Error(\"Invalid property type for record\", typeof property);\n}\n// the registration of the record definition extension (as \"r\")\nconst recordDefinition = (id, highByte)=>{\n    let structure = read().map(asSafeString); // ensure that all keys are strings and\n    // that the array is mutable\n    let firstByte = id;\n    if (highByte !== undefined) {\n        id = id < 32 ? -((highByte << 5) + id) : (highByte << 5) + id;\n        structure.highByte = highByte;\n    }\n    let existingStructure = currentStructures[id];\n    // If it is a shared structure, we need to restore any changes after reading.\n    // Also in sequential mode, we may get incomplete reads and thus errors, and we need to restore\n    // to the state prior to an incomplete read in order to properly resume.\n    if (existingStructure && (existingStructure.isShared || sequentialMode)) {\n        (currentStructures.restoreStructures || (currentStructures.restoreStructures = []))[id] = existingStructure;\n    }\n    currentStructures[id] = structure;\n    structure.read = createStructureReader(structure, firstByte);\n    return structure.read();\n};\ncurrentExtensions[0] = ()=>{}; // notepack defines extension 0 to mean undefined, so use that as the default here\ncurrentExtensions[0].noBuffer = true;\ncurrentExtensions[0x42] = (data)=>{\n    // decode bigint\n    let length = data.length;\n    let value = BigInt(data[0] & 0x80 ? data[0] - 0x100 : data[0]);\n    for(let i = 1; i < length; i++){\n        value <<= BigInt(8);\n        value += BigInt(data[i]);\n    }\n    return value;\n};\nlet errors = {\n    Error,\n    TypeError,\n    ReferenceError\n};\ncurrentExtensions[0x65] = ()=>{\n    let data = read();\n    return (errors[data[0]] || Error)(data[1], {\n        cause: data[2]\n    });\n};\ncurrentExtensions[0x69] = (data)=>{\n    // id extension (for structured clones)\n    if (currentUnpackr.structuredClone === false) throw new Error(\"Structured clone extension is disabled\");\n    let id = dataView.getUint32(position$1 - 4);\n    if (!referenceMap) referenceMap = new Map();\n    let token = src[position$1];\n    let target;\n    // TODO: handle Maps, Sets, and other types that can cycle; this is complicated, because you potentially need to read\n    // ahead past references to record structure definitions\n    if (token >= 0x90 && token < 0xa0 || token == 0xdc || token == 0xdd) target = [];\n    else target = {};\n    let refEntry = {\n        target\n    }; // a placeholder object\n    referenceMap.set(id, refEntry);\n    let targetProperties = read(); // read the next value as the target object to id\n    if (refEntry.used) return Object.assign(target, targetProperties);\n    refEntry.target = targetProperties; // the placeholder wasn't used, replace with the deserialized one\n    return targetProperties // no cycle, can just use the returned read object\n    ;\n};\ncurrentExtensions[0x70] = (data)=>{\n    // pointer extension (for structured clones)\n    if (currentUnpackr.structuredClone === false) throw new Error(\"Structured clone extension is disabled\");\n    let id = dataView.getUint32(position$1 - 4);\n    let refEntry = referenceMap.get(id);\n    refEntry.used = true;\n    return refEntry.target;\n};\ncurrentExtensions[0x73] = ()=>new Set(read());\nconst typedArrays = [\n    \"Int8\",\n    \"Uint8\",\n    \"Uint8Clamped\",\n    \"Int16\",\n    \"Uint16\",\n    \"Int32\",\n    \"Uint32\",\n    \"Float32\",\n    \"Float64\",\n    \"BigInt64\",\n    \"BigUint64\"\n].map((type)=>type + \"Array\");\nlet glbl = typeof globalThis === \"object\" ? globalThis : window;\ncurrentExtensions[0x74] = (data)=>{\n    let typeCode = data[0];\n    let typedArrayName = typedArrays[typeCode];\n    if (!typedArrayName) {\n        if (typeCode === 16) {\n            let ab = new ArrayBuffer(data.length - 1);\n            let u8 = new Uint8Array(ab);\n            u8.set(data.subarray(1));\n            return ab;\n        }\n        throw new Error(\"Could not find typed array for code \" + typeCode);\n    }\n    // we have to always slice/copy here to get a new ArrayBuffer that is word/byte aligned\n    return new glbl[typedArrayName](Uint8Array.prototype.slice.call(data, 1).buffer);\n};\ncurrentExtensions[0x78] = ()=>{\n    let data = read();\n    return new RegExp(data[0], data[1]);\n};\nconst TEMP_BUNDLE = [];\ncurrentExtensions[0x62] = (data)=>{\n    let dataSize = (data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3];\n    let dataPosition = position$1;\n    position$1 += dataSize - data.length;\n    bundledStrings$1 = TEMP_BUNDLE;\n    bundledStrings$1 = [\n        readOnlyJSString(),\n        readOnlyJSString()\n    ];\n    bundledStrings$1.position0 = 0;\n    bundledStrings$1.position1 = 0;\n    bundledStrings$1.postBundlePosition = position$1;\n    position$1 = dataPosition;\n    return read();\n};\ncurrentExtensions[0xff] = (data)=>{\n    // 32-bit date extension\n    if (data.length == 4) return new Date((data[0] * 0x1000000 + (data[1] << 16) + (data[2] << 8) + data[3]) * 1000);\n    else if (data.length == 8) return new Date(((data[0] << 22) + (data[1] << 14) + (data[2] << 6) + (data[3] >> 2)) / 1000000 + ((data[3] & 0x3) * 0x100000000 + data[4] * 0x1000000 + (data[5] << 16) + (data[6] << 8) + data[7]) * 1000);\n    else if (data.length == 12) return new Date(((data[0] << 24) + (data[1] << 16) + (data[2] << 8) + data[3]) / 1000000 + ((data[4] & 0x80 ? -0x1000000000000 : 0) + data[6] * 0x10000000000 + data[7] * 0x100000000 + data[8] * 0x1000000 + (data[9] << 16) + (data[10] << 8) + data[11]) * 1000);\n    else return new Date(\"invalid\");\n}; // notepack defines extension 0 to mean undefined, so use that as the default here\n// registration of bulk record definition?\n// currentExtensions[0x52] = () =>\nfunction saveState$1(callback) {\n    if (onSaveState) onSaveState();\n    let savedSrcEnd = srcEnd;\n    let savedPosition = position$1;\n    let savedStringPosition = stringPosition;\n    let savedSrcStringStart = srcStringStart;\n    let savedSrcStringEnd = srcStringEnd;\n    let savedSrcString = srcString;\n    let savedStrings = strings;\n    let savedReferenceMap = referenceMap;\n    let savedBundledStrings = bundledStrings$1;\n    // TODO: We may need to revisit this if we do more external calls to user code (since it could be slow)\n    let savedSrc = new Uint8Array(src.slice(0, srcEnd)); // we copy the data in case it changes while external data is processed\n    let savedStructures = currentStructures;\n    let savedStructuresContents = currentStructures.slice(0, currentStructures.length);\n    let savedPackr = currentUnpackr;\n    let savedSequentialMode = sequentialMode;\n    let value = callback();\n    srcEnd = savedSrcEnd;\n    position$1 = savedPosition;\n    stringPosition = savedStringPosition;\n    srcStringStart = savedSrcStringStart;\n    srcStringEnd = savedSrcStringEnd;\n    srcString = savedSrcString;\n    strings = savedStrings;\n    referenceMap = savedReferenceMap;\n    bundledStrings$1 = savedBundledStrings;\n    src = savedSrc;\n    sequentialMode = savedSequentialMode;\n    currentStructures = savedStructures;\n    currentStructures.splice(0, currentStructures.length, ...savedStructuresContents);\n    currentUnpackr = savedPackr;\n    dataView = new DataView(src.buffer, src.byteOffset, src.byteLength);\n    return value;\n}\nfunction clearSource() {\n    src = null;\n    referenceMap = null;\n    currentStructures = null;\n}\nfunction addExtension$1(extension) {\n    if (extension.unpack) currentExtensions[extension.type] = extension.unpack;\n    else currentExtensions[extension.type] = extension;\n}\nconst mult10 = new Array(147); // this is a table matching binary exponents to the multiplier to determine significant digit rounding\nfor(let i = 0; i < 256; i++){\n    mult10[i] = +(\"1e\" + Math.floor(45.15 - i * 0.30103));\n}\nconst Decoder = Unpackr;\nvar defaultUnpackr = new Unpackr({\n    useRecords: false\n});\nconst unpack = defaultUnpackr.unpack;\nconst unpackMultiple = defaultUnpackr.unpackMultiple;\nconst decode = defaultUnpackr.unpack;\nconst FLOAT32_OPTIONS = {\n    NEVER: 0,\n    ALWAYS: 1,\n    DECIMAL_ROUND: 3,\n    DECIMAL_FIT: 4\n};\nlet f32Array = new Float32Array(1);\nlet u8Array = new Uint8Array(f32Array.buffer, 0, 4);\nfunction roundFloat32(float32Number) {\n    f32Array[0] = float32Number;\n    let multiplier = mult10[(u8Array[3] & 0x7f) << 1 | u8Array[2] >> 7];\n    return (multiplier * float32Number + (float32Number > 0 ? 0.5 : -0.5) >> 0) / multiplier;\n}\nfunction setReadStruct(updatedReadStruct, loadedStructs, saveState) {\n    readStruct$1 = updatedReadStruct;\n    onLoadedStructures$1 = loadedStructs;\n    onSaveState = saveState;\n}\nlet textEncoder$1;\ntry {\n    textEncoder$1 = new TextEncoder();\n} catch (error) {}\nlet extensions, extensionClasses;\nconst hasNodeBuffer$1 = typeof Buffer !== \"undefined\";\nconst ByteArrayAllocate = hasNodeBuffer$1 ? function(length) {\n    return Buffer.allocUnsafeSlow(length);\n} : Uint8Array;\nconst ByteArray = hasNodeBuffer$1 ? Buffer : Uint8Array;\nconst MAX_BUFFER_SIZE = hasNodeBuffer$1 ? 0x100000000 : 0x7fd00000;\nlet target, keysTarget;\nlet targetView;\nlet position = 0;\nlet safeEnd;\nlet bundledStrings = null;\nlet writeStructSlots;\nconst MAX_BUNDLE_SIZE = 0x5500; // maximum characters such that the encoded bytes fits in 16 bits.\nconst hasNonLatin = /[\\u0080-\\uFFFF]/;\nconst RECORD_SYMBOL = Symbol(\"record-id\");\nclass Packr extends Unpackr {\n    constructor(options){\n        super(options);\n        this.offset = 0;\n        let start;\n        let hasSharedUpdate;\n        let structures;\n        let referenceMap;\n        let encodeUtf8 = ByteArray.prototype.utf8Write ? function(string, position) {\n            return target.utf8Write(string, position, target.byteLength - position);\n        } : textEncoder$1 && textEncoder$1.encodeInto ? function(string, position) {\n            return textEncoder$1.encodeInto(string, target.subarray(position)).written;\n        } : false;\n        let packr = this;\n        if (!options) options = {};\n        let isSequential = options && options.sequential;\n        let hasSharedStructures = options.structures || options.saveStructures;\n        let maxSharedStructures = options.maxSharedStructures;\n        if (maxSharedStructures == null) maxSharedStructures = hasSharedStructures ? 32 : 0;\n        if (maxSharedStructures > 8160) throw new Error(\"Maximum maxSharedStructure is 8160\");\n        if (options.structuredClone && options.moreTypes == undefined) {\n            this.moreTypes = true;\n        }\n        let maxOwnStructures = options.maxOwnStructures;\n        if (maxOwnStructures == null) maxOwnStructures = hasSharedStructures ? 32 : 64;\n        if (!this.structures && options.useRecords != false) this.structures = [];\n        // two byte record ids for shared structures\n        let useTwoByteRecords = maxSharedStructures > 32 || maxOwnStructures + maxSharedStructures > 64;\n        let sharedLimitId = maxSharedStructures + 0x40;\n        let maxStructureId = maxSharedStructures + maxOwnStructures + 0x40;\n        if (maxStructureId > 8256) {\n            throw new Error(\"Maximum maxSharedStructure + maxOwnStructure is 8192\");\n        }\n        let recordIdsToRemove = [];\n        let transitionsCount = 0;\n        let serializationsSinceTransitionRebuild = 0;\n        this.pack = this.encode = function(value, encodeOptions) {\n            if (!target) {\n                target = new ByteArrayAllocate(8192);\n                targetView = target.dataView || (target.dataView = new DataView(target.buffer, 0, 8192));\n                position = 0;\n            }\n            safeEnd = target.length - 10;\n            if (safeEnd - position < 0x800) {\n                // don't start too close to the end,\n                target = new ByteArrayAllocate(target.length);\n                targetView = target.dataView || (target.dataView = new DataView(target.buffer, 0, target.length));\n                safeEnd = target.length - 10;\n                position = 0;\n            } else position = position + 7 & 0x7ffffff8; // Word align to make any future copying of this buffer faster\n            start = position;\n            if (encodeOptions & RESERVE_START_SPACE) position += encodeOptions & 0xff;\n            referenceMap = packr.structuredClone ? new Map() : null;\n            if (packr.bundleStrings && typeof value !== \"string\") {\n                bundledStrings = [];\n                bundledStrings.size = Infinity; // force a new bundle start on first string\n            } else bundledStrings = null;\n            structures = packr.structures;\n            if (structures) {\n                if (structures.uninitialized) structures = packr._mergeStructures(packr.getStructures());\n                let sharedLength = structures.sharedLength || 0;\n                if (sharedLength > maxSharedStructures) {\n                    //if (maxSharedStructures <= 32 && structures.sharedLength > 32) // TODO: could support this, but would need to update the limit ids\n                    throw new Error(\"Shared structures is larger than maximum shared structures, try increasing maxSharedStructures to \" + structures.sharedLength);\n                }\n                if (!structures.transitions) {\n                    // rebuild our structure transitions\n                    structures.transitions = Object.create(null);\n                    for(let i = 0; i < sharedLength; i++){\n                        let keys = structures[i];\n                        if (!keys) continue;\n                        let nextTransition, transition = structures.transitions;\n                        for(let j = 0, l = keys.length; j < l; j++){\n                            let key = keys[j];\n                            nextTransition = transition[key];\n                            if (!nextTransition) {\n                                nextTransition = transition[key] = Object.create(null);\n                            }\n                            transition = nextTransition;\n                        }\n                        transition[RECORD_SYMBOL] = i + 0x40;\n                    }\n                    this.lastNamedStructuresLength = sharedLength;\n                }\n                if (!isSequential) {\n                    structures.nextId = sharedLength + 0x40;\n                }\n            }\n            if (hasSharedUpdate) hasSharedUpdate = false;\n            let encodingError;\n            try {\n                if (packr.randomAccessStructure && value && value.constructor && value.constructor === Object) writeStruct(value);\n                else pack(value);\n                let lastBundle = bundledStrings;\n                if (bundledStrings) writeBundles(start, pack, 0);\n                if (referenceMap && referenceMap.idsToInsert) {\n                    let idsToInsert = referenceMap.idsToInsert.sort((a, b)=>a.offset > b.offset ? 1 : -1);\n                    let i = idsToInsert.length;\n                    let incrementPosition = -1;\n                    while(lastBundle && i > 0){\n                        let insertionPoint = idsToInsert[--i].offset + start;\n                        if (insertionPoint < lastBundle.stringsPosition + start && incrementPosition === -1) incrementPosition = 0;\n                        if (insertionPoint > lastBundle.position + start) {\n                            if (incrementPosition >= 0) incrementPosition += 6;\n                        } else {\n                            if (incrementPosition >= 0) {\n                                // update the bundle reference now\n                                targetView.setUint32(lastBundle.position + start, targetView.getUint32(lastBundle.position + start) + incrementPosition);\n                                incrementPosition = -1; // reset\n                            }\n                            lastBundle = lastBundle.previous;\n                            i++;\n                        }\n                    }\n                    if (incrementPosition >= 0 && lastBundle) {\n                        // update the bundle reference now\n                        targetView.setUint32(lastBundle.position + start, targetView.getUint32(lastBundle.position + start) + incrementPosition);\n                    }\n                    position += idsToInsert.length * 6;\n                    if (position > safeEnd) makeRoom(position);\n                    packr.offset = position;\n                    let serialized = insertIds(target.subarray(start, position), idsToInsert);\n                    referenceMap = null;\n                    return serialized;\n                }\n                packr.offset = position; // update the offset so next serialization doesn't write over our buffer, but can continue writing to same buffer sequentially\n                if (encodeOptions & REUSE_BUFFER_MODE) {\n                    target.start = start;\n                    target.end = position;\n                    return target;\n                }\n                return target.subarray(start, position) // position can change if we call pack again in saveStructures, so we get the buffer now\n                ;\n            } catch (error) {\n                encodingError = error;\n                throw error;\n            } finally{\n                if (structures) {\n                    resetStructures();\n                    if (hasSharedUpdate && packr.saveStructures) {\n                        let sharedLength = structures.sharedLength || 0;\n                        // we can't rely on start/end with REUSE_BUFFER_MODE since they will (probably) change when we save\n                        let returnBuffer = target.subarray(start, position);\n                        let newSharedData = prepareStructures$1(structures, packr);\n                        if (!encodingError) {\n                            if (packr.saveStructures(newSharedData, newSharedData.isCompatible) === false) {\n                                // get updated structures and try again if the update failed\n                                return packr.pack(value, encodeOptions);\n                            }\n                            packr.lastNamedStructuresLength = sharedLength;\n                            // don't keep large buffers around\n                            if (target.length > 0x40000000) target = null;\n                            return returnBuffer;\n                        }\n                    }\n                }\n                // don't keep large buffers around, they take too much memory and cause problems (limit at 1GB)\n                if (target.length > 0x40000000) target = null;\n                if (encodeOptions & RESET_BUFFER_MODE) position = start;\n            }\n        };\n        const resetStructures = ()=>{\n            if (serializationsSinceTransitionRebuild < 10) serializationsSinceTransitionRebuild++;\n            let sharedLength = structures.sharedLength || 0;\n            if (structures.length > sharedLength && !isSequential) structures.length = sharedLength;\n            if (transitionsCount > 10000) {\n                // force a rebuild occasionally after a lot of transitions so it can get cleaned up\n                structures.transitions = null;\n                serializationsSinceTransitionRebuild = 0;\n                transitionsCount = 0;\n                if (recordIdsToRemove.length > 0) recordIdsToRemove = [];\n            } else if (recordIdsToRemove.length > 0 && !isSequential) {\n                for(let i = 0, l = recordIdsToRemove.length; i < l; i++){\n                    recordIdsToRemove[i][RECORD_SYMBOL] = 0;\n                }\n                recordIdsToRemove = [];\n            }\n        };\n        const packArray = (value)=>{\n            var length = value.length;\n            if (length < 0x10) {\n                target[position++] = 0x90 | length;\n            } else if (length < 0x10000) {\n                target[position++] = 0xdc;\n                target[position++] = length >> 8;\n                target[position++] = length & 0xff;\n            } else {\n                target[position++] = 0xdd;\n                targetView.setUint32(position, length);\n                position += 4;\n            }\n            for(let i = 0; i < length; i++){\n                pack(value[i]);\n            }\n        };\n        const pack = (value)=>{\n            if (position > safeEnd) target = makeRoom(position);\n            var type = typeof value;\n            var length;\n            if (type === \"string\") {\n                let strLength = value.length;\n                if (bundledStrings && strLength >= 4 && strLength < 0x1000) {\n                    if ((bundledStrings.size += strLength) > MAX_BUNDLE_SIZE) {\n                        let extStart;\n                        let maxBytes = (bundledStrings[0] ? bundledStrings[0].length * 3 + bundledStrings[1].length : 0) + 10;\n                        if (position + maxBytes > safeEnd) target = makeRoom(position + maxBytes);\n                        let lastBundle;\n                        if (bundledStrings.position) {\n                            lastBundle = bundledStrings;\n                            target[position] = 0xc8; // ext 16\n                            position += 3; // reserve for the writing bundle size\n                            target[position++] = 0x62; // 'b'\n                            extStart = position - start;\n                            position += 4; // reserve for writing bundle reference\n                            writeBundles(start, pack, 0); // write the last bundles\n                            targetView.setUint16(extStart + start - 3, position - start - extStart);\n                        } else {\n                            target[position++] = 0xd6; // fixext 4\n                            target[position++] = 0x62; // 'b'\n                            extStart = position - start;\n                            position += 4; // reserve for writing bundle reference\n                        }\n                        bundledStrings = [\n                            \"\",\n                            \"\"\n                        ]; // create new ones\n                        bundledStrings.previous = lastBundle;\n                        bundledStrings.size = 0;\n                        bundledStrings.position = extStart;\n                    }\n                    let twoByte = hasNonLatin.test(value);\n                    bundledStrings[twoByte ? 0 : 1] += value;\n                    target[position++] = 0xc1;\n                    pack(twoByte ? -strLength : strLength);\n                    return;\n                }\n                let headerSize;\n                // first we estimate the header size, so we can write to the correct location\n                if (strLength < 0x20) {\n                    headerSize = 1;\n                } else if (strLength < 0x100) {\n                    headerSize = 2;\n                } else if (strLength < 0x10000) {\n                    headerSize = 3;\n                } else {\n                    headerSize = 5;\n                }\n                let maxBytes = strLength * 3;\n                if (position + maxBytes > safeEnd) target = makeRoom(position + maxBytes);\n                if (strLength < 0x40 || !encodeUtf8) {\n                    let i, c1, c2, strPosition = position + headerSize;\n                    for(i = 0; i < strLength; i++){\n                        c1 = value.charCodeAt(i);\n                        if (c1 < 0x80) {\n                            target[strPosition++] = c1;\n                        } else if (c1 < 0x800) {\n                            target[strPosition++] = c1 >> 6 | 0xc0;\n                            target[strPosition++] = c1 & 0x3f | 0x80;\n                        } else if ((c1 & 0xfc00) === 0xd800 && ((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00) {\n                            c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);\n                            i++;\n                            target[strPosition++] = c1 >> 18 | 0xf0;\n                            target[strPosition++] = c1 >> 12 & 0x3f | 0x80;\n                            target[strPosition++] = c1 >> 6 & 0x3f | 0x80;\n                            target[strPosition++] = c1 & 0x3f | 0x80;\n                        } else {\n                            target[strPosition++] = c1 >> 12 | 0xe0;\n                            target[strPosition++] = c1 >> 6 & 0x3f | 0x80;\n                            target[strPosition++] = c1 & 0x3f | 0x80;\n                        }\n                    }\n                    length = strPosition - position - headerSize;\n                } else {\n                    length = encodeUtf8(value, position + headerSize);\n                }\n                if (length < 0x20) {\n                    target[position++] = 0xa0 | length;\n                } else if (length < 0x100) {\n                    if (headerSize < 2) {\n                        target.copyWithin(position + 2, position + 1, position + 1 + length);\n                    }\n                    target[position++] = 0xd9;\n                    target[position++] = length;\n                } else if (length < 0x10000) {\n                    if (headerSize < 3) {\n                        target.copyWithin(position + 3, position + 2, position + 2 + length);\n                    }\n                    target[position++] = 0xda;\n                    target[position++] = length >> 8;\n                    target[position++] = length & 0xff;\n                } else {\n                    if (headerSize < 5) {\n                        target.copyWithin(position + 5, position + 3, position + 3 + length);\n                    }\n                    target[position++] = 0xdb;\n                    targetView.setUint32(position, length);\n                    position += 4;\n                }\n                position += length;\n            } else if (type === \"number\") {\n                if (value >>> 0 === value) {\n                    // positive uint\n                    if (value < 0x20 || value < 0x80 && this.useRecords === false || value < 0x40 && !this.randomAccessStructure) {\n                        target[position++] = value;\n                    } else if (value < 0x100) {\n                        target[position++] = 0xcc;\n                        target[position++] = value;\n                    } else if (value < 0x10000) {\n                        target[position++] = 0xcd;\n                        target[position++] = value >> 8;\n                        target[position++] = value & 0xff;\n                    } else {\n                        target[position++] = 0xce;\n                        targetView.setUint32(position, value);\n                        position += 4;\n                    }\n                } else if (value >> 0 === value) {\n                    if (value >= -0x20) {\n                        target[position++] = 0x100 + value;\n                    } else if (value >= -0x80) {\n                        target[position++] = 0xd0;\n                        target[position++] = value + 0x100;\n                    } else if (value >= -0x8000) {\n                        target[position++] = 0xd1;\n                        targetView.setInt16(position, value);\n                        position += 2;\n                    } else {\n                        target[position++] = 0xd2;\n                        targetView.setInt32(position, value);\n                        position += 4;\n                    }\n                } else {\n                    let useFloat32;\n                    if ((useFloat32 = this.useFloat32) > 0 && value < 0x100000000 && value >= -0x80000000) {\n                        target[position++] = 0xca;\n                        targetView.setFloat32(position, value);\n                        let xShifted;\n                        if (useFloat32 < 4 || (xShifted = value * mult10[(target[position] & 0x7f) << 1 | target[position + 1] >> 7]) >> 0 === xShifted) {\n                            position += 4;\n                            return;\n                        } else position--; // move back into position for writing a double\n                    }\n                    target[position++] = 0xcb;\n                    targetView.setFloat64(position, value);\n                    position += 8;\n                }\n            } else if (type === \"object\" || type === \"function\") {\n                if (!value) target[position++] = 0xc0;\n                else {\n                    if (referenceMap) {\n                        let referee = referenceMap.get(value);\n                        if (referee) {\n                            if (!referee.id) {\n                                let idsToInsert = referenceMap.idsToInsert || (referenceMap.idsToInsert = []);\n                                referee.id = idsToInsert.push(referee);\n                            }\n                            target[position++] = 0xd6; // fixext 4\n                            target[position++] = 0x70; // \"p\" for pointer\n                            targetView.setUint32(position, referee.id);\n                            position += 4;\n                            return;\n                        } else referenceMap.set(value, {\n                            offset: position - start\n                        });\n                    }\n                    let constructor = value.constructor;\n                    if (constructor === Object) {\n                        writeObject(value);\n                    } else if (constructor === Array) {\n                        packArray(value);\n                    } else if (constructor === Map) {\n                        if (this.mapAsEmptyObject) target[position++] = 0x80;\n                        else {\n                            length = value.size;\n                            if (length < 0x10) {\n                                target[position++] = 0x80 | length;\n                            } else if (length < 0x10000) {\n                                target[position++] = 0xde;\n                                target[position++] = length >> 8;\n                                target[position++] = length & 0xff;\n                            } else {\n                                target[position++] = 0xdf;\n                                targetView.setUint32(position, length);\n                                position += 4;\n                            }\n                            for (let [key, entryValue] of value){\n                                pack(key);\n                                pack(entryValue);\n                            }\n                        }\n                    } else {\n                        for(let i = 0, l = extensions.length; i < l; i++){\n                            let extensionClass = extensionClasses[i];\n                            if (value instanceof extensionClass) {\n                                let extension = extensions[i];\n                                if (extension.write) {\n                                    if (extension.type) {\n                                        target[position++] = 0xd4; // one byte \"tag\" extension\n                                        target[position++] = extension.type;\n                                        target[position++] = 0;\n                                    }\n                                    let writeResult = extension.write.call(this, value);\n                                    if (writeResult === value) {\n                                        if (Array.isArray(value)) {\n                                            packArray(value);\n                                        } else {\n                                            writeObject(value);\n                                        }\n                                    } else {\n                                        pack(writeResult);\n                                    }\n                                    return;\n                                }\n                                let currentTarget = target;\n                                let currentTargetView = targetView;\n                                let currentPosition = position;\n                                target = null;\n                                let result;\n                                try {\n                                    result = extension.pack.call(this, value, (size)=>{\n                                        // restore target and use it\n                                        target = currentTarget;\n                                        currentTarget = null;\n                                        position += size;\n                                        if (position > safeEnd) makeRoom(position);\n                                        return {\n                                            target,\n                                            targetView,\n                                            position: position - size\n                                        };\n                                    }, pack);\n                                } finally{\n                                    // restore current target information (unless already restored)\n                                    if (currentTarget) {\n                                        target = currentTarget;\n                                        targetView = currentTargetView;\n                                        position = currentPosition;\n                                        safeEnd = target.length - 10;\n                                    }\n                                }\n                                if (result) {\n                                    if (result.length + position > safeEnd) makeRoom(result.length + position);\n                                    position = writeExtensionData(result, target, position, extension.type);\n                                }\n                                return;\n                            }\n                        }\n                        // check isArray after extensions, because extensions can extend Array\n                        if (Array.isArray(value)) {\n                            packArray(value);\n                        } else {\n                            // use this as an alternate mechanism for expressing how to serialize\n                            if (value.toJSON) {\n                                const json = value.toJSON();\n                                // if for some reason value.toJSON returns itself it'll loop forever\n                                if (json !== value) return pack(json);\n                            }\n                            // if there is a writeFunction, use it, otherwise just encode as undefined\n                            if (type === \"function\") return pack(this.writeFunction && this.writeFunction(value));\n                            // no extension found, write as plain object\n                            writeObject(value);\n                        }\n                    }\n                }\n            } else if (type === \"boolean\") {\n                target[position++] = value ? 0xc3 : 0xc2;\n            } else if (type === \"bigint\") {\n                if (value < BigInt(1) << BigInt(63) && value >= -(BigInt(1) << BigInt(63))) {\n                    // use a signed int as long as it fits\n                    target[position++] = 0xd3;\n                    targetView.setBigInt64(position, value);\n                } else if (value < BigInt(1) << BigInt(64) && value > 0) {\n                    // if we can fit an unsigned int, use that\n                    target[position++] = 0xcf;\n                    targetView.setBigUint64(position, value);\n                } else {\n                    // overflow\n                    if (this.largeBigIntToFloat) {\n                        target[position++] = 0xcb;\n                        targetView.setFloat64(position, Number(value));\n                    } else if (this.largeBigIntToString) {\n                        return pack(value.toString());\n                    } else if (this.useBigIntExtension && value < BigInt(2) ** BigInt(1023) && value > -(BigInt(2) ** BigInt(1023))) {\n                        target[position++] = 0xc7;\n                        position++;\n                        target[position++] = 0x42; // \"B\" for BigInt\n                        let bytes = [];\n                        let alignedSign;\n                        do {\n                            let byte = value & BigInt(0xff);\n                            alignedSign = (byte & BigInt(0x80)) === (value < BigInt(0) ? BigInt(0x80) : BigInt(0));\n                            bytes.push(byte);\n                            value >>= BigInt(8);\n                        }while (!((value === BigInt(0) || value === BigInt(-1)) && alignedSign));\n                        target[position - 2] = bytes.length;\n                        for(let i = bytes.length; i > 0;){\n                            target[position++] = Number(bytes[--i]);\n                        }\n                        return;\n                    } else {\n                        throw new RangeError(value + \" was too large to fit in MessagePack 64-bit integer format, use\" + \" useBigIntExtension, or set largeBigIntToFloat to convert to float-64, or set\" + \" largeBigIntToString to convert to string\");\n                    }\n                }\n                position += 8;\n            } else if (type === \"undefined\") {\n                if (this.encodeUndefinedAsNil) target[position++] = 0xc0;\n                else {\n                    target[position++] = 0xd4; // a number of implementations use fixext1 with type 0, data 0 to denote undefined, so we follow suite\n                    target[position++] = 0;\n                    target[position++] = 0;\n                }\n            } else {\n                throw new Error(\"Unknown type: \" + type);\n            }\n        };\n        const writePlainObject = this.variableMapSize || this.coercibleKeyAsNumber || this.skipValues ? (object)=>{\n            // this method is slightly slower, but generates \"preferred serialization\" (optimally small for smaller objects)\n            let keys;\n            if (this.skipValues) {\n                keys = [];\n                for(let key in object){\n                    if ((typeof object.hasOwnProperty !== \"function\" || object.hasOwnProperty(key)) && !this.skipValues.includes(object[key])) keys.push(key);\n                }\n            } else {\n                keys = Object.keys(object);\n            }\n            let length = keys.length;\n            if (length < 0x10) {\n                target[position++] = 0x80 | length;\n            } else if (length < 0x10000) {\n                target[position++] = 0xde;\n                target[position++] = length >> 8;\n                target[position++] = length & 0xff;\n            } else {\n                target[position++] = 0xdf;\n                targetView.setUint32(position, length);\n                position += 4;\n            }\n            let key;\n            if (this.coercibleKeyAsNumber) {\n                for(let i = 0; i < length; i++){\n                    key = keys[i];\n                    let num = Number(key);\n                    pack(isNaN(num) ? key : num);\n                    pack(object[key]);\n                }\n            } else {\n                for(let i = 0; i < length; i++){\n                    pack(key = keys[i]);\n                    pack(object[key]);\n                }\n            }\n        } : (object)=>{\n            target[position++] = 0xde; // always using map 16, so we can preallocate and set the length afterwards\n            let objectOffset = position - start;\n            position += 2;\n            let size = 0;\n            for(let key in object){\n                if (typeof object.hasOwnProperty !== \"function\" || object.hasOwnProperty(key)) {\n                    pack(key);\n                    pack(object[key]);\n                    size++;\n                }\n            }\n            if (size > 0xffff) {\n                throw new Error(\"Object is too large to serialize with fast 16-bit map size,\" + ' use the \"variableMapSize\" option to serialize this object');\n            }\n            target[objectOffset++ + start] = size >> 8;\n            target[objectOffset + start] = size & 0xff;\n        };\n        const writeRecord = this.useRecords === false ? writePlainObject : options.progressiveRecords && !useTwoByteRecords ? (object)=>{\n            let nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null));\n            let objectOffset = position++ - start;\n            let wroteKeys;\n            for(let key in object){\n                if (typeof object.hasOwnProperty !== \"function\" || object.hasOwnProperty(key)) {\n                    nextTransition = transition[key];\n                    if (nextTransition) transition = nextTransition;\n                    else {\n                        // record doesn't exist, create full new record and insert it\n                        let keys = Object.keys(object);\n                        let lastTransition = transition;\n                        transition = structures.transitions;\n                        let newTransitions = 0;\n                        for(let i = 0, l = keys.length; i < l; i++){\n                            let key = keys[i];\n                            nextTransition = transition[key];\n                            if (!nextTransition) {\n                                nextTransition = transition[key] = Object.create(null);\n                                newTransitions++;\n                            }\n                            transition = nextTransition;\n                        }\n                        if (objectOffset + start + 1 == position) {\n                            // first key, so we don't need to insert, we can just write record directly\n                            position--;\n                            newRecord(transition, keys, newTransitions);\n                        } else insertNewRecord(transition, keys, objectOffset, newTransitions);\n                        wroteKeys = true;\n                        transition = lastTransition[key];\n                    }\n                    pack(object[key]);\n                }\n            }\n            if (!wroteKeys) {\n                let recordId = transition[RECORD_SYMBOL];\n                if (recordId) target[objectOffset + start] = recordId;\n                else insertNewRecord(transition, Object.keys(object), objectOffset, 0);\n            }\n        } : (object)=>{\n            let nextTransition, transition = structures.transitions || (structures.transitions = Object.create(null));\n            let newTransitions = 0;\n            for(let key in object)if (typeof object.hasOwnProperty !== \"function\" || object.hasOwnProperty(key)) {\n                nextTransition = transition[key];\n                if (!nextTransition) {\n                    nextTransition = transition[key] = Object.create(null);\n                    newTransitions++;\n                }\n                transition = nextTransition;\n            }\n            let recordId = transition[RECORD_SYMBOL];\n            if (recordId) {\n                if (recordId >= 0x60 && useTwoByteRecords) {\n                    target[position++] = ((recordId -= 0x60) & 0x1f) + 0x60;\n                    target[position++] = recordId >> 5;\n                } else target[position++] = recordId;\n            } else {\n                newRecord(transition, transition.__keys__ || Object.keys(object), newTransitions);\n            }\n            // now write the values\n            for(let key in object)if (typeof object.hasOwnProperty !== \"function\" || object.hasOwnProperty(key)) {\n                pack(object[key]);\n            }\n        };\n        // create reference to useRecords if useRecords is a function\n        const checkUseRecords = typeof this.useRecords == \"function\" && this.useRecords;\n        const writeObject = checkUseRecords ? (object)=>{\n            checkUseRecords(object) ? writeRecord(object) : writePlainObject(object);\n        } : writeRecord;\n        const makeRoom = (end)=>{\n            let newSize;\n            if (end > 0x1000000) {\n                // special handling for really large buffers\n                if (end - start > MAX_BUFFER_SIZE) throw new Error(\"Packed buffer would be larger than maximum buffer size\");\n                newSize = Math.min(MAX_BUFFER_SIZE, Math.round(Math.max((end - start) * (end > 0x4000000 ? 1.25 : 2), 0x400000) / 0x1000) * 0x1000);\n            } else newSize = (Math.max(end - start << 2, target.length - 1) >> 12) + 1 << 12;\n            let newBuffer = new ByteArrayAllocate(newSize);\n            targetView = newBuffer.dataView || (newBuffer.dataView = new DataView(newBuffer.buffer, 0, newSize));\n            end = Math.min(end, target.length);\n            if (target.copy) target.copy(newBuffer, 0, start, end);\n            else newBuffer.set(target.slice(start, end));\n            position -= start;\n            start = 0;\n            safeEnd = newBuffer.length - 10;\n            return target = newBuffer;\n        };\n        const newRecord = (transition, keys, newTransitions)=>{\n            let recordId = structures.nextId;\n            if (!recordId) recordId = 0x40;\n            if (recordId < sharedLimitId && this.shouldShareStructure && !this.shouldShareStructure(keys)) {\n                recordId = structures.nextOwnId;\n                if (!(recordId < maxStructureId)) recordId = sharedLimitId;\n                structures.nextOwnId = recordId + 1;\n            } else {\n                if (recordId >= maxStructureId) recordId = sharedLimitId;\n                structures.nextId = recordId + 1;\n            }\n            let highByte = keys.highByte = recordId >= 0x60 && useTwoByteRecords ? recordId - 0x60 >> 5 : -1;\n            transition[RECORD_SYMBOL] = recordId;\n            transition.__keys__ = keys;\n            structures[recordId - 0x40] = keys;\n            if (recordId < sharedLimitId) {\n                keys.isShared = true;\n                structures.sharedLength = recordId - 0x3f;\n                hasSharedUpdate = true;\n                if (highByte >= 0) {\n                    target[position++] = (recordId & 0x1f) + 0x60;\n                    target[position++] = highByte;\n                } else {\n                    target[position++] = recordId;\n                }\n            } else {\n                if (highByte >= 0) {\n                    target[position++] = 0xd5; // fixext 2\n                    target[position++] = 0x72; // \"r\" record defintion extension type\n                    target[position++] = (recordId & 0x1f) + 0x60;\n                    target[position++] = highByte;\n                } else {\n                    target[position++] = 0xd4; // fixext 1\n                    target[position++] = 0x72; // \"r\" record defintion extension type\n                    target[position++] = recordId;\n                }\n                if (newTransitions) transitionsCount += serializationsSinceTransitionRebuild * newTransitions;\n                // record the removal of the id, we can maintain our shared structure\n                if (recordIdsToRemove.length >= maxOwnStructures) recordIdsToRemove.shift()[RECORD_SYMBOL] = 0; // we are cycling back through, and have to remove old ones\n                recordIdsToRemove.push(transition);\n                pack(keys);\n            }\n        };\n        const insertNewRecord = (transition, keys, insertionOffset, newTransitions)=>{\n            let mainTarget = target;\n            let mainPosition = position;\n            let mainSafeEnd = safeEnd;\n            let mainStart = start;\n            target = keysTarget;\n            position = 0;\n            start = 0;\n            if (!target) keysTarget = target = new ByteArrayAllocate(8192);\n            safeEnd = target.length - 10;\n            newRecord(transition, keys, newTransitions);\n            keysTarget = target;\n            let keysPosition = position;\n            target = mainTarget;\n            position = mainPosition;\n            safeEnd = mainSafeEnd;\n            start = mainStart;\n            if (keysPosition > 1) {\n                let newEnd = position + keysPosition - 1;\n                if (newEnd > safeEnd) makeRoom(newEnd);\n                let insertionPosition = insertionOffset + start;\n                target.copyWithin(insertionPosition + keysPosition, insertionPosition + 1, position);\n                target.set(keysTarget.slice(0, keysPosition), insertionPosition);\n                position = newEnd;\n            } else {\n                target[insertionOffset + start] = keysTarget[0];\n            }\n        };\n        const writeStruct = (object)=>{\n            let newPosition = writeStructSlots(object, target, start, position, structures, makeRoom, (value, newPosition, notifySharedUpdate)=>{\n                if (notifySharedUpdate) return hasSharedUpdate = true;\n                position = newPosition;\n                let startTarget = target;\n                pack(value);\n                resetStructures();\n                if (startTarget !== target) {\n                    return {\n                        position,\n                        targetView,\n                        target\n                    }; // indicate the buffer was re-allocated\n                }\n                return position;\n            }, this);\n            if (newPosition === 0) return writeObject(object);\n            position = newPosition;\n        };\n    }\n    useBuffer(buffer) {\n        // this means we are finished using our own buffer and we can write over it safely\n        target = buffer;\n        target.dataView || (target.dataView = new DataView(target.buffer, target.byteOffset, target.byteLength));\n        position = 0;\n    }\n    set position(value) {\n        position = value;\n    }\n    get position() {\n        return position;\n    }\n    clearSharedData() {\n        if (this.structures) this.structures = [];\n        if (this.typedStructs) this.typedStructs = [];\n    }\n}\nextensionClasses = [\n    Date,\n    Set,\n    Error,\n    RegExp,\n    ArrayBuffer,\n    Object.getPrototypeOf(Uint8Array.prototype).constructor /*TypedArray*/ ,\n    C1Type\n];\nextensions = [\n    {\n        pack (date, allocateForWrite, pack) {\n            let seconds = date.getTime() / 1000;\n            if ((this.useTimestamp32 || date.getMilliseconds() === 0) && seconds >= 0 && seconds < 0x100000000) {\n                // Timestamp 32\n                let { target, targetView, position } = allocateForWrite(6);\n                target[position++] = 0xd6;\n                target[position++] = 0xff;\n                targetView.setUint32(position, seconds);\n            } else if (seconds > 0 && seconds < 0x100000000) {\n                // Timestamp 64\n                let { target, targetView, position } = allocateForWrite(10);\n                target[position++] = 0xd7;\n                target[position++] = 0xff;\n                targetView.setUint32(position, date.getMilliseconds() * 4000000 + (seconds / 1000 / 0x100000000 >> 0));\n                targetView.setUint32(position + 4, seconds);\n            } else if (isNaN(seconds)) {\n                if (this.onInvalidDate) {\n                    allocateForWrite(0);\n                    return pack(this.onInvalidDate());\n                }\n                // Intentionally invalid timestamp\n                let { target, targetView, position } = allocateForWrite(3);\n                target[position++] = 0xd4;\n                target[position++] = 0xff;\n                target[position++] = 0xff;\n            } else {\n                // Timestamp 96\n                let { target, targetView, position } = allocateForWrite(15);\n                target[position++] = 0xc7;\n                target[position++] = 12;\n                target[position++] = 0xff;\n                targetView.setUint32(position, date.getMilliseconds() * 1000000);\n                targetView.setBigInt64(position + 4, BigInt(Math.floor(seconds)));\n            }\n        }\n    },\n    {\n        pack (set, allocateForWrite, pack) {\n            if (this.setAsEmptyObject) {\n                allocateForWrite(0);\n                return pack({});\n            }\n            let array = Array.from(set);\n            let { target, position } = allocateForWrite(this.moreTypes ? 3 : 0);\n            if (this.moreTypes) {\n                target[position++] = 0xd4;\n                target[position++] = 0x73; // 's' for Set\n                target[position++] = 0;\n            }\n            pack(array);\n        }\n    },\n    {\n        pack (error, allocateForWrite, pack) {\n            let { target, position } = allocateForWrite(this.moreTypes ? 3 : 0);\n            if (this.moreTypes) {\n                target[position++] = 0xd4;\n                target[position++] = 0x65; // 'e' for error\n                target[position++] = 0;\n            }\n            pack([\n                error.name,\n                error.message,\n                error.cause\n            ]);\n        }\n    },\n    {\n        pack (regex, allocateForWrite, pack) {\n            let { target, position } = allocateForWrite(this.moreTypes ? 3 : 0);\n            if (this.moreTypes) {\n                target[position++] = 0xd4;\n                target[position++] = 0x78; // 'x' for regeXp\n                target[position++] = 0;\n            }\n            pack([\n                regex.source,\n                regex.flags\n            ]);\n        }\n    },\n    {\n        pack (arrayBuffer, allocateForWrite) {\n            if (this.moreTypes) writeExtBuffer(arrayBuffer, 0x10, allocateForWrite);\n            else writeBuffer(hasNodeBuffer$1 ? Buffer.from(arrayBuffer) : new Uint8Array(arrayBuffer), allocateForWrite);\n        }\n    },\n    {\n        pack (typedArray, allocateForWrite) {\n            let constructor = typedArray.constructor;\n            if (constructor !== ByteArray && this.moreTypes) writeExtBuffer(typedArray, typedArrays.indexOf(constructor.name), allocateForWrite);\n            else writeBuffer(typedArray, allocateForWrite);\n        }\n    },\n    {\n        pack (c1, allocateForWrite) {\n            let { target, position } = allocateForWrite(1);\n            target[position] = 0xc1;\n        }\n    }\n];\nfunction writeExtBuffer(typedArray, type, allocateForWrite, encode) {\n    let length = typedArray.byteLength;\n    if (length + 1 < 0x100) {\n        var { target, position } = allocateForWrite(4 + length);\n        target[position++] = 0xc7;\n        target[position++] = length + 1;\n    } else if (length + 1 < 0x10000) {\n        var { target, position } = allocateForWrite(5 + length);\n        target[position++] = 0xc8;\n        target[position++] = length + 1 >> 8;\n        target[position++] = length + 1 & 0xff;\n    } else {\n        var { target, position, targetView } = allocateForWrite(7 + length);\n        target[position++] = 0xc9;\n        targetView.setUint32(position, length + 1); // plus one for the type byte\n        position += 4;\n    }\n    target[position++] = 0x74; // \"t\" for typed array\n    target[position++] = type;\n    if (!typedArray.buffer) typedArray = new Uint8Array(typedArray);\n    target.set(new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength), position);\n}\nfunction writeBuffer(buffer, allocateForWrite) {\n    let length = buffer.byteLength;\n    var target, position;\n    if (length < 0x100) {\n        var { target, position } = allocateForWrite(length + 2);\n        target[position++] = 0xc4;\n        target[position++] = length;\n    } else if (length < 0x10000) {\n        var { target, position } = allocateForWrite(length + 3);\n        target[position++] = 0xc5;\n        target[position++] = length >> 8;\n        target[position++] = length & 0xff;\n    } else {\n        var { target, position, targetView } = allocateForWrite(length + 5);\n        target[position++] = 0xc6;\n        targetView.setUint32(position, length);\n        position += 4;\n    }\n    target.set(buffer, position);\n}\nfunction writeExtensionData(result, target, position, type) {\n    let length = result.length;\n    switch(length){\n        case 1:\n            target[position++] = 0xd4;\n            break;\n        case 2:\n            target[position++] = 0xd5;\n            break;\n        case 4:\n            target[position++] = 0xd6;\n            break;\n        case 8:\n            target[position++] = 0xd7;\n            break;\n        case 16:\n            target[position++] = 0xd8;\n            break;\n        default:\n            if (length < 0x100) {\n                target[position++] = 0xc7;\n                target[position++] = length;\n            } else if (length < 0x10000) {\n                target[position++] = 0xc8;\n                target[position++] = length >> 8;\n                target[position++] = length & 0xff;\n            } else {\n                target[position++] = 0xc9;\n                target[position++] = length >> 24;\n                target[position++] = length >> 16 & 0xff;\n                target[position++] = length >> 8 & 0xff;\n                target[position++] = length & 0xff;\n            }\n    }\n    target[position++] = type;\n    target.set(result, position);\n    position += length;\n    return position;\n}\nfunction insertIds(serialized, idsToInsert) {\n    // insert the ids that need to be referenced for structured clones\n    let nextId;\n    let distanceToMove = idsToInsert.length * 6;\n    let lastEnd = serialized.length - distanceToMove;\n    while(nextId = idsToInsert.pop()){\n        let offset = nextId.offset;\n        let id = nextId.id;\n        serialized.copyWithin(offset + distanceToMove, offset, lastEnd);\n        distanceToMove -= 6;\n        let position = offset + distanceToMove;\n        serialized[position++] = 0xd6;\n        serialized[position++] = 0x69; // 'i'\n        serialized[position++] = id >> 24;\n        serialized[position++] = id >> 16 & 0xff;\n        serialized[position++] = id >> 8 & 0xff;\n        serialized[position++] = id & 0xff;\n        lastEnd = offset;\n    }\n    return serialized;\n}\nfunction writeBundles(start, pack, incrementPosition) {\n    if (bundledStrings.length > 0) {\n        targetView.setUint32(bundledStrings.position + start, position + incrementPosition - bundledStrings.position - start);\n        bundledStrings.stringsPosition = position - start;\n        let writeStrings = bundledStrings;\n        bundledStrings = null;\n        pack(writeStrings[0]);\n        pack(writeStrings[1]);\n    }\n}\nfunction addExtension(extension) {\n    if (extension.Class) {\n        if (!extension.pack && !extension.write) throw new Error(\"Extension has no pack or write function\");\n        if (extension.pack && !extension.type) throw new Error(\"Extension has no type (numeric code to identify the extension)\");\n        extensionClasses.unshift(extension.Class);\n        extensions.unshift(extension);\n    }\n    addExtension$1(extension);\n}\nfunction prepareStructures$1(structures, packr) {\n    structures.isCompatible = (existingStructures)=>{\n        let compatible = !existingStructures || (packr.lastNamedStructuresLength || 0) === existingStructures.length;\n        if (!compatible) packr._mergeStructures(existingStructures);\n        return compatible;\n    };\n    return structures;\n}\nfunction setWriteStructSlots(writeSlots, makeStructures) {\n    writeStructSlots = writeSlots;\n    prepareStructures$1 = makeStructures;\n}\nlet defaultPackr = new Packr({\n    useRecords: false\n});\nconst pack = defaultPackr.pack;\nconst encode = defaultPackr.pack;\nconst Encoder = Packr;\nconst { NEVER, ALWAYS, DECIMAL_ROUND, DECIMAL_FIT } = FLOAT32_OPTIONS;\nconst REUSE_BUFFER_MODE = 512;\nconst RESET_BUFFER_MODE = 1024;\nconst RESERVE_START_SPACE = 2048;\nconst ASCII = 3; // the MIBenum from https://www.iana.org/assignments/character-sets/character-sets.xhtml (and other character encodings could be referenced by MIBenum)\nconst NUMBER = 0;\nconst UTF8 = 2;\nconst OBJECT_DATA = 1;\nconst DATE = 16;\nconst TYPE_NAMES = [\n    \"num\",\n    \"object\",\n    \"string\",\n    \"ascii\"\n];\nTYPE_NAMES[DATE] = \"date\";\nconst float32Headers = [\n    false,\n    true,\n    true,\n    false,\n    false,\n    true,\n    true,\n    false\n];\nlet evalSupported;\ntry {\n    new Function(\"\");\n    evalSupported = true;\n} catch (error) {\n// if eval variants are not supported, do not create inline object readers ever\n}\nlet updatedPosition;\nconst hasNodeBuffer = typeof Buffer !== \"undefined\";\nlet textEncoder, currentSource;\ntry {\n    textEncoder = new TextEncoder();\n} catch (error) {}\nconst encodeUtf8 = hasNodeBuffer ? function(target, string, position) {\n    return target.utf8Write(string, position, target.byteLength - position);\n} : textEncoder && textEncoder.encodeInto ? function(target, string, position) {\n    return textEncoder.encodeInto(string, target.subarray(position)).written;\n} : false;\nsetWriteStructSlots(writeStruct, prepareStructures);\nfunction writeStruct(object, target, encodingStart, position, structures, makeRoom, pack, packr) {\n    let typedStructs = packr.typedStructs || (packr.typedStructs = []);\n    // note that we rely on pack.js to load stored structures before we get to this point\n    let targetView = target.dataView;\n    let refsStartPosition = (typedStructs.lastStringStart || 100) + position;\n    let safeEnd = target.length - 10;\n    let start = position;\n    if (position > safeEnd) {\n        target = makeRoom(position);\n        targetView = target.dataView;\n        position -= encodingStart;\n        start -= encodingStart;\n        refsStartPosition -= encodingStart;\n        encodingStart = 0;\n        safeEnd = target.length - 10;\n    }\n    let refOffset, refPosition = refsStartPosition;\n    let transition = typedStructs.transitions || (typedStructs.transitions = Object.create(null));\n    let nextId = typedStructs.nextId || typedStructs.length;\n    let headerSize = nextId < 0xf ? 1 : nextId < 0xf0 ? 2 : nextId < 0xf000 ? 3 : nextId < 0xf00000 ? 4 : 0;\n    if (headerSize === 0) return 0;\n    position += headerSize;\n    let queuedReferences = [];\n    let usedAscii0;\n    let keyIndex = 0;\n    for(let key in object){\n        let value = object[key];\n        let nextTransition = transition[key];\n        if (!nextTransition) {\n            transition[key] = nextTransition = {\n                key,\n                parent: transition,\n                enumerationOffset: 0,\n                ascii0: null,\n                ascii8: null,\n                num8: null,\n                string16: null,\n                object16: null,\n                num32: null,\n                float64: null,\n                date64: null\n            };\n        }\n        if (position > safeEnd) {\n            target = makeRoom(position);\n            targetView = target.dataView;\n            position -= encodingStart;\n            start -= encodingStart;\n            refsStartPosition -= encodingStart;\n            refPosition -= encodingStart;\n            encodingStart = 0;\n            safeEnd = target.length - 10;\n        }\n        switch(typeof value){\n            case \"number\":\n                let number = value;\n                // first check to see if we are using a lot of ids and should default to wide/common format\n                if (nextId < 200 || !nextTransition.num64) {\n                    if (number >> 0 === number && number < 0x20000000 && number > -0x1f000000) {\n                        if (number < 0xf6 && number >= 0 && (nextTransition.num8 && !(nextId > 200 && nextTransition.num32) || number < 0x20 && !nextTransition.num32)) {\n                            transition = nextTransition.num8 || createTypeTransition(nextTransition, NUMBER, 1);\n                            target[position++] = number;\n                        } else {\n                            transition = nextTransition.num32 || createTypeTransition(nextTransition, NUMBER, 4);\n                            targetView.setUint32(position, number, true);\n                            position += 4;\n                        }\n                        break;\n                    } else if (number < 0x100000000 && number >= -0x80000000) {\n                        targetView.setFloat32(position, number, true);\n                        if (float32Headers[target[position + 3] >>> 5]) {\n                            let xShifted;\n                            // this checks for rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n                            if ((xShifted = number * mult10[(target[position + 3] & 0x7f) << 1 | target[position + 2] >> 7]) >> 0 === xShifted) {\n                                transition = nextTransition.num32 || createTypeTransition(nextTransition, NUMBER, 4);\n                                position += 4;\n                                break;\n                            }\n                        }\n                    }\n                }\n                transition = nextTransition.num64 || createTypeTransition(nextTransition, NUMBER, 8);\n                targetView.setFloat64(position, number, true);\n                position += 8;\n                break;\n            case \"string\":\n                let strLength = value.length;\n                refOffset = refPosition - refsStartPosition;\n                if ((strLength << 2) + refPosition > safeEnd) {\n                    target = makeRoom((strLength << 2) + refPosition);\n                    targetView = target.dataView;\n                    position -= encodingStart;\n                    start -= encodingStart;\n                    refsStartPosition -= encodingStart;\n                    refPosition -= encodingStart;\n                    encodingStart = 0;\n                    safeEnd = target.length - 10;\n                }\n                if (strLength > 0xff00 + refOffset >> 2) {\n                    queuedReferences.push(key, value, position - start);\n                    break;\n                }\n                let isNotAscii;\n                let strStart = refPosition;\n                if (strLength < 0x40) {\n                    let i, c1, c2;\n                    for(i = 0; i < strLength; i++){\n                        c1 = value.charCodeAt(i);\n                        if (c1 < 0x80) {\n                            target[refPosition++] = c1;\n                        } else if (c1 < 0x800) {\n                            isNotAscii = true;\n                            target[refPosition++] = c1 >> 6 | 0xc0;\n                            target[refPosition++] = c1 & 0x3f | 0x80;\n                        } else if ((c1 & 0xfc00) === 0xd800 && ((c2 = value.charCodeAt(i + 1)) & 0xfc00) === 0xdc00) {\n                            isNotAscii = true;\n                            c1 = 0x10000 + ((c1 & 0x03ff) << 10) + (c2 & 0x03ff);\n                            i++;\n                            target[refPosition++] = c1 >> 18 | 0xf0;\n                            target[refPosition++] = c1 >> 12 & 0x3f | 0x80;\n                            target[refPosition++] = c1 >> 6 & 0x3f | 0x80;\n                            target[refPosition++] = c1 & 0x3f | 0x80;\n                        } else {\n                            isNotAscii = true;\n                            target[refPosition++] = c1 >> 12 | 0xe0;\n                            target[refPosition++] = c1 >> 6 & 0x3f | 0x80;\n                            target[refPosition++] = c1 & 0x3f | 0x80;\n                        }\n                    }\n                } else {\n                    refPosition += encodeUtf8(target, value, refPosition);\n                    isNotAscii = refPosition - strStart > strLength;\n                }\n                if (refOffset < 0xa0 || refOffset < 0xf6 && (nextTransition.ascii8 || nextTransition.string8)) {\n                    // short strings\n                    if (isNotAscii) {\n                        if (!(transition = nextTransition.string8)) {\n                            if (typedStructs.length > 10 && (transition = nextTransition.ascii8)) {\n                                // we can safely change ascii to utf8 in place since they are compatible\n                                transition.__type = UTF8;\n                                nextTransition.ascii8 = null;\n                                nextTransition.string8 = transition;\n                                pack(null, 0, true); // special call to notify that structures have been updated\n                            } else {\n                                transition = createTypeTransition(nextTransition, UTF8, 1);\n                            }\n                        }\n                    } else if (refOffset === 0 && !usedAscii0) {\n                        usedAscii0 = true;\n                        transition = nextTransition.ascii0 || createTypeTransition(nextTransition, ASCII, 0);\n                        break; // don't increment position\n                    } else if (!(transition = nextTransition.ascii8) && !(typedStructs.length > 10 && (transition = nextTransition.string8))) transition = createTypeTransition(nextTransition, ASCII, 1);\n                    target[position++] = refOffset;\n                } else {\n                    // TODO: Enable ascii16 at some point, but get the logic right\n                    //if (isNotAscii)\n                    transition = nextTransition.string16 || createTypeTransition(nextTransition, UTF8, 2);\n                    //else\n                    //transition = nextTransition.ascii16 || createTypeTransition(nextTransition, ASCII, 2);\n                    targetView.setUint16(position, refOffset, true);\n                    position += 2;\n                }\n                break;\n            case \"object\":\n                if (value) {\n                    if (value.constructor === Date) {\n                        transition = nextTransition.date64 || createTypeTransition(nextTransition, DATE, 8);\n                        targetView.setFloat64(position, value.getTime(), true);\n                        position += 8;\n                    } else {\n                        queuedReferences.push(key, value, keyIndex);\n                    }\n                    break;\n                } else {\n                    nextTransition = anyType(nextTransition, position, targetView, -10); // match CBOR with this\n                    if (nextTransition) {\n                        transition = nextTransition;\n                        position = updatedPosition;\n                    } else queuedReferences.push(key, value, keyIndex);\n                }\n                break;\n            case \"boolean\":\n                transition = nextTransition.num8 || nextTransition.ascii8 || createTypeTransition(nextTransition, NUMBER, 1);\n                target[position++] = value ? 0xf9 : 0xf8; // match CBOR with these\n                break;\n            case \"undefined\":\n                nextTransition = anyType(nextTransition, position, targetView, -9); // match CBOR with this\n                if (nextTransition) {\n                    transition = nextTransition;\n                    position = updatedPosition;\n                } else queuedReferences.push(key, value, keyIndex);\n                break;\n            default:\n                queuedReferences.push(key, value, keyIndex);\n        }\n        keyIndex++;\n    }\n    for(let i = 0, l = queuedReferences.length; i < l;){\n        let key = queuedReferences[i++];\n        let value = queuedReferences[i++];\n        let propertyIndex = queuedReferences[i++];\n        let nextTransition = transition[key];\n        if (!nextTransition) {\n            transition[key] = nextTransition = {\n                key,\n                parent: transition,\n                enumerationOffset: propertyIndex - keyIndex,\n                ascii0: null,\n                ascii8: null,\n                num8: null,\n                string16: null,\n                object16: null,\n                num32: null,\n                float64: null\n            };\n        }\n        let newPosition;\n        if (value) {\n            /*if (typeof value === 'string') { // TODO: we could re-enable long strings\n\t\t\t\tif (position + value.length * 3 > safeEnd) {\n\t\t\t\t\ttarget = makeRoom(position + value.length * 3);\n\t\t\t\t\tposition -= start;\n\t\t\t\t\ttargetView = target.dataView;\n\t\t\t\t\tstart = 0;\n\t\t\t\t}\n\t\t\t\tnewPosition = position + target.utf8Write(value, position, 0xffffffff);\n\t\t\t} else { */ let size;\n            refOffset = refPosition - refsStartPosition;\n            if (refOffset < 0xff00) {\n                transition = nextTransition.object16;\n                if (transition) size = 2;\n                else if (transition = nextTransition.object32) size = 4;\n                else {\n                    transition = createTypeTransition(nextTransition, OBJECT_DATA, 2);\n                    size = 2;\n                }\n            } else {\n                transition = nextTransition.object32 || createTypeTransition(nextTransition, OBJECT_DATA, 4);\n                size = 4;\n            }\n            newPosition = pack(value, refPosition);\n            //}\n            if (typeof newPosition === \"object\") {\n                // re-allocated\n                refPosition = newPosition.position;\n                targetView = newPosition.targetView;\n                target = newPosition.target;\n                refsStartPosition -= encodingStart;\n                position -= encodingStart;\n                start -= encodingStart;\n                encodingStart = 0;\n            } else refPosition = newPosition;\n            if (size === 2) {\n                targetView.setUint16(position, refOffset, true);\n                position += 2;\n            } else {\n                targetView.setUint32(position, refOffset, true);\n                position += 4;\n            }\n        } else {\n            transition = nextTransition.object16 || createTypeTransition(nextTransition, OBJECT_DATA, 2);\n            targetView.setInt16(position, value === null ? -10 : -9, true);\n            position += 2;\n        }\n        keyIndex++;\n    }\n    let recordId = transition[RECORD_SYMBOL];\n    if (recordId == null) {\n        recordId = packr.typedStructs.length;\n        let structure = [];\n        let nextTransition = transition;\n        let key, type;\n        while((type = nextTransition.__type) !== undefined){\n            let size = nextTransition.__size;\n            nextTransition = nextTransition.__parent;\n            key = nextTransition.key;\n            let property = [\n                type,\n                size,\n                key\n            ];\n            if (nextTransition.enumerationOffset) property.push(nextTransition.enumerationOffset);\n            structure.push(property);\n            nextTransition = nextTransition.parent;\n        }\n        structure.reverse();\n        transition[RECORD_SYMBOL] = recordId;\n        packr.typedStructs[recordId] = structure;\n        pack(null, 0, true); // special call to notify that structures have been updated\n    }\n    switch(headerSize){\n        case 1:\n            if (recordId >= 0x10) return 0;\n            target[start] = recordId + 0x20;\n            break;\n        case 2:\n            if (recordId >= 0x100) return 0;\n            target[start] = 0x38;\n            target[start + 1] = recordId;\n            break;\n        case 3:\n            if (recordId >= 0x10000) return 0;\n            target[start] = 0x39;\n            targetView.setUint16(start + 1, recordId, true);\n            break;\n        case 4:\n            if (recordId >= 0x1000000) return 0;\n            targetView.setUint32(start, (recordId << 8) + 0x3a, true);\n            break;\n    }\n    if (position < refsStartPosition) {\n        if (refsStartPosition === refPosition) return position; // no refs\n        // adjust positioning\n        target.copyWithin(position, refsStartPosition, refPosition);\n        refPosition += position - refsStartPosition;\n        typedStructs.lastStringStart = position - start;\n    } else if (position > refsStartPosition) {\n        if (refsStartPosition === refPosition) return position; // no refs\n        typedStructs.lastStringStart = position - start;\n        return writeStruct(object, target, encodingStart, start, structures, makeRoom, pack, packr);\n    }\n    return refPosition;\n}\nfunction anyType(transition, position, targetView, value) {\n    let nextTransition;\n    if (nextTransition = transition.ascii8 || transition.num8) {\n        targetView.setInt8(position, value, true);\n        updatedPosition = position + 1;\n        return nextTransition;\n    }\n    if (nextTransition = transition.string16 || transition.object16) {\n        targetView.setInt16(position, value, true);\n        updatedPosition = position + 2;\n        return nextTransition;\n    }\n    if (nextTransition = transition.num32) {\n        targetView.setUint32(position, 0xe0000100 + value, true);\n        updatedPosition = position + 4;\n        return nextTransition;\n    }\n    // transition.float64\n    if (nextTransition = transition.num64) {\n        targetView.setFloat64(position, NaN, true);\n        targetView.setInt8(position, value);\n        updatedPosition = position + 8;\n        return nextTransition;\n    }\n    updatedPosition = position;\n    // TODO: can we do an \"any\" type where we defer the decision?\n    return;\n}\nfunction createTypeTransition(transition, type, size) {\n    let typeName = TYPE_NAMES[type] + (size << 3);\n    let newTransition = transition[typeName] || (transition[typeName] = Object.create(null));\n    newTransition.__type = type;\n    newTransition.__size = size;\n    newTransition.__parent = transition;\n    return newTransition;\n}\nfunction onLoadedStructures(sharedData) {\n    if (!(sharedData instanceof Map)) return sharedData;\n    let typed = sharedData.get(\"typed\") || [];\n    if (Object.isFrozen(typed)) typed = typed.map((structure)=>structure.slice(0));\n    let named = sharedData.get(\"named\");\n    let transitions = Object.create(null);\n    for(let i = 0, l = typed.length; i < l; i++){\n        let structure = typed[i];\n        let transition = transitions;\n        for (let [type, size, key] of structure){\n            let nextTransition = transition[key];\n            if (!nextTransition) {\n                transition[key] = nextTransition = {\n                    key,\n                    parent: transition,\n                    enumerationOffset: 0,\n                    ascii0: null,\n                    ascii8: null,\n                    num8: null,\n                    string16: null,\n                    object16: null,\n                    num32: null,\n                    float64: null,\n                    date64: null\n                };\n            }\n            transition = createTypeTransition(nextTransition, type, size);\n        }\n        transition[RECORD_SYMBOL] = i;\n    }\n    typed.transitions = transitions;\n    this.typedStructs = typed;\n    this.lastTypedStructuresLength = typed.length;\n    return named;\n}\nvar sourceSymbol = Symbol.for(\"source\");\nfunction readStruct(src, position, srcEnd, unpackr) {\n    let recordId = src[position++] - 0x20;\n    if (recordId >= 24) {\n        switch(recordId){\n            case 24:\n                recordId = src[position++];\n                break;\n            // little endian:\n            case 25:\n                recordId = src[position++] + (src[position++] << 8);\n                break;\n            case 26:\n                recordId = src[position++] + (src[position++] << 8) + (src[position++] << 16);\n                break;\n            case 27:\n                recordId = src[position++] + (src[position++] << 8) + (src[position++] << 16) + (src[position++] << 24);\n                break;\n        }\n    }\n    let structure = unpackr.typedStructs && unpackr.typedStructs[recordId];\n    if (!structure) {\n        // copy src buffer because getStructures will override it\n        src = Uint8Array.prototype.slice.call(src, position, srcEnd);\n        srcEnd -= position;\n        position = 0;\n        if (!unpackr.getStructures) throw new Error(`Reference to shared structure ${recordId} without getStructures method`);\n        unpackr._mergeStructures(unpackr.getStructures());\n        if (!unpackr.typedStructs) throw new Error(\"Could not find any shared typed structures\");\n        unpackr.lastTypedStructuresLength = unpackr.typedStructs.length;\n        structure = unpackr.typedStructs[recordId];\n        if (!structure) throw new Error(\"Could not find typed structure \" + recordId);\n    }\n    var construct = structure.construct;\n    if (!construct) {\n        construct = structure.construct = function LazyObject() {};\n        var prototype = construct.prototype;\n        let properties = [];\n        let currentOffset = 0;\n        let lastRefProperty;\n        for(let i = 0, l = structure.length; i < l; i++){\n            let definition = structure[i];\n            let [type, size, key, enumerationOffset] = definition;\n            if (key === \"__proto__\") key = \"__proto_\";\n            let property = {\n                key,\n                offset: currentOffset\n            };\n            if (enumerationOffset) properties.splice(i + enumerationOffset, 0, property);\n            else properties.push(property);\n            let getRef;\n            switch(size){\n                case 0:\n                    getRef = ()=>0;\n                    break;\n                case 1:\n                    getRef = (source, position)=>{\n                        let ref = source.bytes[position + property.offset];\n                        return ref >= 0xf6 ? toConstant(ref) : ref;\n                    };\n                    break;\n                case 2:\n                    getRef = (source, position)=>{\n                        let src = source.bytes;\n                        let dataView = src.dataView || (src.dataView = new DataView(src.buffer, src.byteOffset, src.byteLength));\n                        let ref = dataView.getUint16(position + property.offset, true);\n                        return ref >= 0xff00 ? toConstant(ref & 0xff) : ref;\n                    };\n                    break;\n                case 4:\n                    getRef = (source, position)=>{\n                        let src = source.bytes;\n                        let dataView = src.dataView || (src.dataView = new DataView(src.buffer, src.byteOffset, src.byteLength));\n                        let ref = dataView.getUint32(position + property.offset, true);\n                        return ref >= 0xffffff00 ? toConstant(ref & 0xff) : ref;\n                    };\n                    break;\n            }\n            property.getRef = getRef;\n            currentOffset += size;\n            let get;\n            switch(type){\n                case ASCII:\n                    if (lastRefProperty && !lastRefProperty.next) lastRefProperty.next = property;\n                    lastRefProperty = property;\n                    property.multiGetCount = 0;\n                    get = function(source) {\n                        let src = source.bytes;\n                        let position = source.position;\n                        let refStart = currentOffset + position;\n                        let ref = getRef(source, position);\n                        if (typeof ref !== \"number\") return ref;\n                        let end, next = property.next;\n                        while(next){\n                            end = next.getRef(source, position);\n                            if (typeof end === \"number\") break;\n                            else end = null;\n                            next = next.next;\n                        }\n                        if (end == null) end = source.bytesEnd - refStart;\n                        if (source.srcString) {\n                            return source.srcString.slice(ref, end);\n                        }\n                        /*if (property.multiGetCount > 0) {\n\t\t\t\t\t\t\tlet asciiEnd;\n\t\t\t\t\t\t\tnext = firstRefProperty;\n\t\t\t\t\t\t\tlet dataView = src.dataView || (src.dataView = new DataView(src.buffer, src.byteOffset, src.byteLength));\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tasciiEnd = dataView.getUint16(source.position + next.offset, true);\n\t\t\t\t\t\t\t\tif (asciiEnd < 0xff00)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tasciiEnd = null;\n\t\t\t\t\t\t\t} while((next = next.next));\n\t\t\t\t\t\t\tif (asciiEnd == null)\n\t\t\t\t\t\t\t\tasciiEnd = source.bytesEnd - refStart\n\t\t\t\t\t\t\tsource.srcString = src.toString('latin1', refStart, refStart + asciiEnd);\n\t\t\t\t\t\t\treturn source.srcString.slice(ref, end);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (source.prevStringGet) {\n\t\t\t\t\t\t\tsource.prevStringGet.multiGetCount += 2;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsource.prevStringGet = property;\n\t\t\t\t\t\t\tproperty.multiGetCount--;\n\t\t\t\t\t\t}*/ return readString(src, ref + refStart, end - ref);\n                    //return src.toString('latin1', ref + refStart, end + refStart);\n                    };\n                    break;\n                case UTF8:\n                case OBJECT_DATA:\n                    if (lastRefProperty && !lastRefProperty.next) lastRefProperty.next = property;\n                    lastRefProperty = property;\n                    get = function(source) {\n                        let position = source.position;\n                        let refStart = currentOffset + position;\n                        let ref = getRef(source, position);\n                        if (typeof ref !== \"number\") return ref;\n                        let src = source.bytes;\n                        let end, next = property.next;\n                        while(next){\n                            end = next.getRef(source, position);\n                            if (typeof end === \"number\") break;\n                            else end = null;\n                            next = next.next;\n                        }\n                        if (end == null) end = source.bytesEnd - refStart;\n                        if (type === UTF8) {\n                            return src.toString(\"utf8\", ref + refStart, end + refStart);\n                        } else {\n                            currentSource = source;\n                            try {\n                                return unpackr.unpack(src, {\n                                    start: ref + refStart,\n                                    end: end + refStart\n                                });\n                            } finally{\n                                currentSource = null;\n                            }\n                        }\n                    };\n                    break;\n                case NUMBER:\n                    switch(size){\n                        case 4:\n                            get = function(source) {\n                                let src = source.bytes;\n                                let dataView = src.dataView || (src.dataView = new DataView(src.buffer, src.byteOffset, src.byteLength));\n                                let position = source.position + property.offset;\n                                let value = dataView.getInt32(position, true);\n                                if (value < 0x20000000) {\n                                    if (value > -0x1f000000) return value;\n                                    if (value > -0x20000000) return toConstant(value & 0xff);\n                                }\n                                let fValue = dataView.getFloat32(position, true);\n                                // this does rounding of numbers that were encoded in 32-bit float to nearest significant decimal digit that could be preserved\n                                let multiplier = mult10[(src[position + 3] & 0x7f) << 1 | src[position + 2] >> 7];\n                                return (multiplier * fValue + (fValue > 0 ? 0.5 : -0.5) >> 0) / multiplier;\n                            };\n                            break;\n                        case 8:\n                            get = function(source) {\n                                let src = source.bytes;\n                                let dataView = src.dataView || (src.dataView = new DataView(src.buffer, src.byteOffset, src.byteLength));\n                                let value = dataView.getFloat64(source.position + property.offset, true);\n                                if (isNaN(value)) {\n                                    let byte = src[source.position + property.offset];\n                                    if (byte >= 0xf6) return toConstant(byte);\n                                }\n                                return value;\n                            };\n                            break;\n                        case 1:\n                            get = function(source) {\n                                let src = source.bytes;\n                                let value = src[source.position + property.offset];\n                                return value < 0xf6 ? value : toConstant(value);\n                            };\n                            break;\n                    }\n                    break;\n                case DATE:\n                    get = function(source) {\n                        let src = source.bytes;\n                        let dataView = src.dataView || (src.dataView = new DataView(src.buffer, src.byteOffset, src.byteLength));\n                        return new Date(dataView.getFloat64(source.position + property.offset, true));\n                    };\n                    break;\n            }\n            property.get = get;\n        }\n        // TODO: load the srcString for faster string decoding on toJSON\n        if (evalSupported) {\n            let objectLiteralProperties = [];\n            let args = [];\n            let i = 0;\n            let hasInheritedProperties;\n            for (let property of properties){\n                if (unpackr.alwaysLazyProperty && unpackr.alwaysLazyProperty(property.key)) {\n                    // these properties are not eagerly evaluated and this can be used for creating properties\n                    // that are not serialized as JSON\n                    hasInheritedProperties = true;\n                    continue;\n                }\n                Object.defineProperty(prototype, property.key, {\n                    get: withSource(property.get),\n                    enumerable: true\n                });\n                let valueFunction = \"v\" + i++;\n                args.push(valueFunction);\n                objectLiteralProperties.push(\"[\" + JSON.stringify(property.key) + \"]:\" + valueFunction + \"(s)\");\n            }\n            if (hasInheritedProperties) {\n                objectLiteralProperties.push(\"__proto__:this\");\n            }\n            let toObject = new Function(...args, \"return function(s){return{\" + objectLiteralProperties.join(\",\") + \"}}\").apply(null, properties.map((prop)=>prop.get));\n            Object.defineProperty(prototype, \"toJSON\", {\n                value (omitUnderscoredProperties) {\n                    return toObject.call(this, this[sourceSymbol]);\n                }\n            });\n        } else {\n            Object.defineProperty(prototype, \"toJSON\", {\n                value (omitUnderscoredProperties) {\n                    // return an enumerable object with own properties to JSON stringify\n                    let resolved = {};\n                    for(let i = 0, l = properties.length; i < l; i++){\n                        // TODO: check alwaysLazyProperty\n                        let key = properties[i].key;\n                        resolved[key] = this[key];\n                    }\n                    return resolved;\n                }\n            });\n        }\n    }\n    var instance = new construct();\n    instance[sourceSymbol] = {\n        bytes: src,\n        position,\n        srcString: \"\",\n        bytesEnd: srcEnd\n    };\n    return instance;\n}\nfunction toConstant(code) {\n    switch(code){\n        case 0xf6:\n            return null;\n        case 0xf7:\n            return undefined;\n        case 0xf8:\n            return false;\n        case 0xf9:\n            return true;\n    }\n    throw new Error(\"Unknown constant\");\n}\nfunction withSource(get) {\n    return function() {\n        return get(this[sourceSymbol]);\n    };\n}\nfunction saveState() {\n    if (currentSource) {\n        currentSource.bytes = Uint8Array.prototype.slice.call(currentSource.bytes, currentSource.position, currentSource.bytesEnd);\n        currentSource.position = 0;\n        currentSource.bytesEnd = currentSource.bytes.length;\n    }\n}\nfunction prepareStructures(structures, packr) {\n    if (packr.typedStructs) {\n        let structMap = new Map();\n        structMap.set(\"named\", structures);\n        structMap.set(\"typed\", packr.typedStructs);\n        structures = structMap;\n    }\n    let lastTypedStructuresLength = packr.lastTypedStructuresLength || 0;\n    structures.isCompatible = (existing)=>{\n        let compatible = true;\n        if (existing instanceof Map) {\n            let named = existing.get(\"named\") || [];\n            if (named.length !== (packr.lastNamedStructuresLength || 0)) compatible = false;\n            let typed = existing.get(\"typed\") || [];\n            if (typed.length !== lastTypedStructuresLength) compatible = false;\n        } else if (existing instanceof Array || Array.isArray(existing)) {\n            if (existing.length !== (packr.lastNamedStructuresLength || 0)) compatible = false;\n        }\n        if (!compatible) packr._mergeStructures(existing);\n        return compatible;\n    };\n    packr.lastTypedStructuresLength = packr.typedStructs && packr.typedStructs.length;\n    return structures;\n}\nsetReadStruct(readStruct, onLoadedStructures, saveState);\nclass PackrStream extends stream.Transform {\n    constructor(options){\n        if (!options) options = {};\n        options.writableObjectMode = true;\n        super(options);\n        options.sequential = true;\n        this.packr = options.packr || new Packr(options);\n    }\n    _transform(value, encoding, callback) {\n        this.push(this.packr.pack(value));\n        callback();\n    }\n}\nclass UnpackrStream extends stream.Transform {\n    constructor(options){\n        if (!options) options = {};\n        options.objectMode = true;\n        super(options);\n        options.structures = [];\n        this.unpackr = options.unpackr || new Unpackr(options);\n    }\n    _transform(chunk, encoding, callback) {\n        if (this.incompleteBuffer) {\n            chunk = Buffer.concat([\n                this.incompleteBuffer,\n                chunk\n            ]);\n            this.incompleteBuffer = null;\n        }\n        let values;\n        try {\n            values = this.unpackr.unpackMultiple(chunk);\n        } catch (error) {\n            if (error.incomplete) {\n                this.incompleteBuffer = chunk.slice(error.lastPosition);\n                values = error.values;\n            } else throw error;\n        } finally{\n            for (let value of values || []){\n                if (value === null) value = this.getNullValue();\n                this.push(value);\n            }\n        }\n        if (callback) callback();\n    }\n    getNullValue() {\n        return Symbol.for(null);\n    }\n}\n/**\n * Given an Iterable first argument, returns an Iterable where each value is packed as a Buffer\n * If the argument is only Async Iterable, the return value will be an Async Iterable.\n * @param {Iterable|Iterator|AsyncIterable|AsyncIterator} objectIterator - iterable source, like a Readable object stream, an array, Set, or custom object\n * @param {options} [options] - msgpackr pack options\n * @returns {IterableIterator|Promise.<AsyncIterableIterator>}\n */ function packIter(objectIterator, options = {}) {\n    if (!objectIterator || typeof objectIterator !== \"object\") {\n        throw new Error(\"first argument must be an Iterable, Async Iterable, or a Promise for an Async Iterable\");\n    } else if (typeof objectIterator[Symbol.iterator] === \"function\") {\n        return packIterSync(objectIterator, options);\n    } else if (typeof objectIterator.then === \"function\" || typeof objectIterator[Symbol.asyncIterator] === \"function\") {\n        return packIterAsync(objectIterator, options);\n    } else {\n        throw new Error(\"first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a Promise\");\n    }\n}\nfunction* packIterSync(objectIterator, options) {\n    const packr = new Packr(options);\n    for (const value of objectIterator){\n        yield packr.pack(value);\n    }\n}\nasync function* packIterAsync(objectIterator, options) {\n    const packr = new Packr(options);\n    for await (const value of objectIterator){\n        yield packr.pack(value);\n    }\n}\n/**\n * Given an Iterable/Iterator input which yields buffers, returns an IterableIterator which yields sync decoded objects\n * Or, given an Async Iterable/Iterator which yields promises resolving in buffers, returns an AsyncIterableIterator.\n * @param {Iterable|Iterator|AsyncIterable|AsyncIterableIterator} bufferIterator\n * @param {object} [options] - unpackr options\n * @returns {IterableIterator|Promise.<AsyncIterableIterator}\n */ function unpackIter(bufferIterator, options = {}) {\n    if (!bufferIterator || typeof bufferIterator !== \"object\") {\n        throw new Error(\"first argument must be an Iterable, Async Iterable, Iterator, Async Iterator, or a promise\");\n    }\n    const unpackr = new Unpackr(options);\n    let incomplete;\n    const parser = (chunk)=>{\n        let yields;\n        // if there's incomplete data from previous chunk, concatinate and try again\n        if (incomplete) {\n            chunk = Buffer.concat([\n                incomplete,\n                chunk\n            ]);\n            incomplete = undefined;\n        }\n        try {\n            yields = unpackr.unpackMultiple(chunk);\n        } catch (err) {\n            if (err.incomplete) {\n                incomplete = chunk.slice(err.lastPosition);\n                yields = err.values;\n            } else {\n                throw err;\n            }\n        }\n        return yields;\n    };\n    if (typeof bufferIterator[Symbol.iterator] === \"function\") {\n        return function* iter() {\n            for (const value of bufferIterator){\n                yield* parser(value);\n            }\n        }();\n    } else if (typeof bufferIterator[Symbol.asyncIterator] === \"function\") {\n        return async function* iter() {\n            for await (const value of bufferIterator){\n                yield* parser(value);\n            }\n        }();\n    }\n}\nconst decodeIter = unpackIter;\nconst encodeIter = packIter;\nconst useRecords = false;\nconst mapsAsObjects = true;\nconst nativeAccelerationDisabled = process.env.MSGPACKR_NATIVE_ACCELERATION_DISABLED !== undefined && process.env.MSGPACKR_NATIVE_ACCELERATION_DISABLED.toLowerCase() === \"true\";\nif (!nativeAccelerationDisabled) {\n    let extractor;\n    try {\n        if (true) extractor = __webpack_require__(/*! msgpackr-extract */ \"(rsc)/./node_modules/msgpackr-extract/index.js\");\n        else {}\n        if (extractor) setExtractor(extractor.extractStrings);\n    } catch (error) {\n    // native module is optional\n    }\n}\nexports.ALWAYS = ALWAYS;\nexports.C1 = C1;\nexports.DECIMAL_FIT = DECIMAL_FIT;\nexports.DECIMAL_ROUND = DECIMAL_ROUND;\nexports.Decoder = Decoder;\nexports.DecoderStream = UnpackrStream;\nexports.Encoder = Encoder;\nexports.EncoderStream = PackrStream;\nexports.FLOAT32_OPTIONS = FLOAT32_OPTIONS;\nexports.NEVER = NEVER;\nexports.Packr = Packr;\nexports.PackrStream = PackrStream;\nexports.Unpackr = Unpackr;\nexports.UnpackrStream = UnpackrStream;\nexports.addExtension = addExtension;\nexports.clearSource = clearSource;\nexports.decode = decode;\nexports.decodeIter = decodeIter;\nexports.encode = encode;\nexports.encodeIter = encodeIter;\nexports.mapsAsObjects = mapsAsObjects;\nexports.pack = pack;\nexports.roundFloat32 = roundFloat32;\nexports.unpack = unpack;\nexports.unpackMultiple = unpackMultiple;\nexports.useRecords = useRecords; //# sourceMappingURL=node.cjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/msgpackr/dist/node.cjs\n");

/***/ })

};
;