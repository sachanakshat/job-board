[2024-03-19 10:30:00] User Request:
From now on, store every prompt which I give you in prompts.txt file. Store each prompt with timestamp and prompt body/request.

Use MongoDB as my backend database to store all results. The connection string is stored in .env named as "MONGODB_CONNECTION_STRING".

Create all the tables like job status queue table, final resultant JSON table, job_listings and artifacts table, etc.

Try running the application and send the sample curl request- 

The webscraping part may take time. So instead, create jobs logic, and return the job ID with the response.

Next, use the same job ID to query status of job, or better check all the running jobs with a single API. This API should contain string of JobID and status.

There should be an API to query the Job ID, and if the job is finished, return the response.

Try running the sample cURL and fix the issue until you get the desired response via job ID

[2024-03-19 11:30:00] User Request:
Please modify the package.json, to kill any existing processes/process at port 3000 before starting npm run dev

Rules for the Job Board Scraper Project:

1. Project Structure:
   - All services should be organized in the `services` directory
   - Each service should have its own subdirectory
   - Keep the root directory clean
   - Maintain the archive directory for reference

2. Backend Service:
   - Use Python with FastAPI
   - Implement job board scrapers
   - Handle job processing and storage
   - Provide REST API endpoints

3. Database Services:
   - Use Redis for job queue and temporary storage
   - Use MongoDB for persistent storage
   - Configure proper environment variables

4. Containerization:
   - Each service should have its own Dockerfile
   - Use docker-compose for orchestration
   - Follow best practices for Docker images

5. Documentation:
   - Keep INTERNAL.md updated with architecture changes
   - Document API endpoints and usage
   - Include setup instructions

6. Development:
   - Follow Python best practices
   - Use type hints
   - Write clean, maintainable code
   - Handle errors appropriately

[2024-03-19 12:30:00] User Request:
Follow this file- rules.txt
Append this entire text to prompts.txt

Do these things-
1. Use Flask for the backend, instead of FastAPI. Use module type structure like defined in "lib" folder for equivalent NextJS.

2. Create a NextJS service, named frontend, and move all relevant files- package.json, next.config, lib, etc to that microservice.

3. Update all the architecture information in INTERNAL.md

4. Create a test microservice, containing 2 type of test suites- frontend tests and backend tests. Backend tests should be able to test on both python and NextJS APIs. There should be proper error report and logging, and also a test summary/dashboard which tells pass/fail testcases. This test suite should be highly configurable, and I should be able to choose what tests to run from the command line itself.

5. Create testcases in test-service, that should cover all the API endpoints we have for python microservice.

Parent folder structure should be clean. Do not get rid of the archive folder.
